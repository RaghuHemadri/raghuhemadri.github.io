<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://raghuhemadri.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://raghuhemadri.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-10T22:55:26+00:00</updated><id>https://raghuhemadri.github.io/feed.xml</id><title type="html">Raghu Hemadri</title><subtitle>ML Research @ NYU </subtitle><entry><title type="html">MLOps: Cloud Computing Definitions</title><link href="https://raghuhemadri.github.io/blog/2025/mlops-cloud-def/" rel="alternate" type="text/html" title="MLOps: Cloud Computing Definitions"/><published>2025-01-30T10:00:00+00:00</published><updated>2025-01-30T10:00:00+00:00</updated><id>https://raghuhemadri.github.io/blog/2025/mlops-cloud-def</id><content type="html" xml:base="https://raghuhemadri.github.io/blog/2025/mlops-cloud-def/"><![CDATA[<h1 id="block-file-and-object-storage"><strong>Block, File, and Object Storage</strong></h1> <p>Storage solutions in computing can be categorized into <strong>Block Storage, File Storage, and Object Storage</strong> based on their data structure and access methods.</p> <hr/> <h2 id="1-block-storage"><strong>1. Block Storage</strong></h2> <h3 id="definition"><strong>Definition</strong></h3> <p>Block storage splits data into <strong>fixed-size blocks</strong>, each with a unique identifier. When needed, the system retrieves and assembles these blocks to reconstruct the complete file.</p> <h3 id="key-characteristics"><strong>Key Characteristics</strong></h3> <p>✅ Low latency, high performance</p> <p>✅ Used for structured data (databases, VMs, etc.)</p> <p>✅ Requires an OS or filesystem to manage file structure</p> <p>✅ Typically found in SAN (Storage Area Network) systems</p> <h3 id="example"><strong>Example</strong></h3> <ul> <li><strong>Amazon EBS (Elastic Block Store)</strong></li> <li><strong>Google Persistent Disk</strong></li> <li><strong>iSCSI (Internet Small Computer Systems Interface)</strong></li> </ul> <h3 id="use-case"><strong>Use Case</strong></h3> <ul> <li><strong>Databases</strong> (MySQL, PostgreSQL, etc.)</li> <li><strong>Virtual machines</strong> (VMware, KVM)</li> <li><strong>High-performance applications</strong></li> </ul> <hr/> <h2 id="2-file-storage"><strong>2. File Storage</strong></h2> <h3 id="definition-1"><strong>Definition</strong></h3> <p>File storage organizes data in a <strong>hierarchical structure</strong> of directories and subdirectories, managed by <strong>a file system</strong> such as NTFS, ext4, or NFS.</p> <h3 id="key-characteristics-1"><strong>Key Characteristics</strong></h3> <p>✅ Easy to navigate (like a local disk structure)</p> <p>✅ Supports file-level access</p> <p>✅ Requires a filesystem to manage organization</p> <h3 id="example-1"><strong>Example</strong></h3> <ul> <li><strong>Network File System (NFS)</strong></li> <li><strong>Server Message Block (SMB)</strong></li> <li><strong>Amazon Elastic File System (EFS)</strong></li> </ul> <h3 id="use-case-1"><strong>Use Case</strong></h3> <ul> <li><strong>Shared drives</strong> in organizations</li> <li><strong>File servers</strong></li> <li><strong>Media storage (videos, images, documents)</strong></li> </ul> <hr/> <h2 id="3-object-storage"><strong>3. Object Storage</strong></h2> <h3 id="definition-2"><strong>Definition</strong></h3> <p>Object storage stores data as <strong>objects</strong> in a <strong>flat namespace</strong>, where each object contains:</p> <ul> <li>The <strong>data</strong> itself</li> <li><strong>Metadata</strong> (extra details like owner, timestamps, etc.)</li> <li>A <strong>unique identifier (UUID)</strong></li> </ul> <h3 id="key-characteristics-2"><strong>Key Characteristics</strong></h3> <p>✅ Scalable to petabytes and beyond</p> <p>✅ Best for unstructured data (videos, backups, logs)</p> <p>✅ No traditional file hierarchy (flat structure)</p> <p>✅ Uses APIs for access (e.g., HTTP REST API)</p> <h3 id="example-2"><strong>Example</strong></h3> <ul> <li><strong>Amazon S3 (Simple Storage Service)</strong></li> <li><strong>Google Cloud Storage</strong></li> <li><strong>Azure Blob Storage</strong></li> </ul> <h3 id="use-case-2"><strong>Use Case</strong></h3> <ul> <li><strong>Cloud storage (Google Drive, Dropbox, etc.)</strong></li> <li><strong>Backup and disaster recovery</strong></li> <li><strong>Content delivery networks (CDNs)</strong></li> </ul> <hr/> <h3 id="comparison-table"><strong>Comparison Table</strong></h3> <table> <thead> <tr> <th>Feature</th> <th>Block Storage</th> <th>File Storage</th> <th>Object Storage</th> </tr> </thead> <tbody> <tr> <td><strong>Structure</strong></td> <td>Divided into blocks</td> <td>Hierarchical (folders)</td> <td>Flat (key-value store)</td> </tr> <tr> <td><strong>Performance</strong></td> <td>High</td> <td>Moderate</td> <td>Moderate</td> </tr> <tr> <td><strong>Access</strong></td> <td>Low-level (disk I/O)</td> <td>File-based (NFS, SMB)</td> <td>API-based (REST, S3)</td> </tr> <tr> <td><strong>Best For</strong></td> <td>Databases, VMs</td> <td>File sharing, home directories</td> <td>Cloud storage, backups, multimedia</td> </tr> <tr> <td><strong>Scalability</strong></td> <td>Limited</td> <td>Moderate</td> <td>High (Petabyte scale)</td> </tr> </tbody> </table> <hr/> <h2 id="which-one-should-you-choose"><strong>Which One Should You Choose?</strong></h2> <ul> <li><strong>Use Block Storage</strong> for high-performance applications like databases and virtual machines.</li> <li><strong>Use File Storage</strong> when you need shared access to files, like a company network drive.</li> <li><strong>Use Object Storage</strong> for large-scale, unstructured data like images, videos, and backups.</li> </ul> <h1 id="virtual-networks-load-balancers-and-security-groups-explained"><strong>Virtual Networks, Load Balancers, and Security Groups Explained</strong></h1> <p>These three networking concepts form the foundation of <strong>cloud computing and distributed systems</strong>, providing essential <strong>connectivity, scalability, and security</strong>.</p> <hr/> <h2 id="1-virtual-networks-vnetvpc"><strong>1. Virtual Networks (VNet/VPC)</strong></h2> <h3 id="definition-3"><strong>Definition</strong></h3> <p>A <strong>Virtual Network (VNet)</strong> or <strong>Virtual Private Cloud (VPC)</strong> is a <strong>logically isolated network</strong> in the cloud that enables secure communication between resources like VMs, databases, and storage.</p> <h3 id="key-features"><strong>Key Features</strong></h3> <p>✅ <strong>Subnetting</strong> – Dividing a network into smaller segments (subnets)</p> <p>✅ <strong>Private &amp; Public IPs</strong> – Enables internal and external communication</p> <p>✅ <strong>Network Peering</strong> – Connects different virtual networks</p> <p>✅ <strong>Routing</strong> – Defines how traffic flows between resources</p> <h3 id="example-3"><strong>Example</strong></h3> <ul> <li><strong>AWS Virtual Private Cloud (VPC)</strong></li> <li><strong>Azure Virtual Network (VNet)</strong></li> <li><strong>Google Cloud Virtual Private Cloud (VPC)</strong></li> </ul> <h3 id="use-case-3"><strong>Use Case</strong></h3> <ul> <li>Creating <strong>isolated environments</strong> for applications</li> <li>Connecting <strong>on-premises networks</strong> to the cloud via <strong>VPN or Direct Connect</strong></li> <li>Implementing <strong>microservices architecture</strong> with different subnets</li> </ul> <hr/> <h2 id="2-load-balancers"><strong>2. Load Balancers</strong></h2> <h3 id="definition-4"><strong>Definition</strong></h3> <p>A <strong>Load Balancer</strong> distributes incoming network traffic across multiple servers to ensure high availability and reliability.</p> <h3 id="types-of-load-balancers"><strong>Types of Load Balancers</strong></h3> <ol> <li><strong>Layer 4 Load Balancer (Transport Layer - TCP/UDP)</strong> <ul> <li>Routes traffic based on IP address and port.</li> <li>Example: <strong>AWS Network Load Balancer (NLB)</strong></li> </ul> </li> <li><strong>Layer 7 Load Balancer (Application Layer - HTTP/HTTPS)</strong> <ul> <li>Routes traffic based on URL, headers, cookies, etc.</li> <li>Example: <strong>AWS Application Load Balancer (ALB)</strong></li> </ul> </li> </ol> <h3 id="key-features-1"><strong>Key Features</strong></h3> <p>✅ <strong>Traffic Distribution</strong> – Prevents overloading a single server</p> <p>✅ <strong>Health Checks</strong> – Removes unhealthy instances from the pool</p> <p>✅ <strong>Session Persistence</strong> – Maintains user sessions</p> <p>✅ <strong>SSL Termination</strong> – Handles encryption and decryption for HTTPS</p> <h3 id="example-4"><strong>Example</strong></h3> <ul> <li><strong>AWS Elastic Load Balancer (ELB)</strong></li> <li><strong>Azure Load Balancer</strong></li> <li><strong>Google Cloud Load Balancer</strong></li> </ul> <h3 id="use-case-4"><strong>Use Case</strong></h3> <ul> <li>Scaling <strong>web applications</strong> horizontally</li> <li>Ensuring <strong>zero downtime</strong> by distributing traffic across multiple servers</li> <li>Redirecting traffic based on <strong>geolocation or request type</strong></li> </ul> <hr/> <h2 id="3-security-groups"><strong>3. Security Groups</strong></h2> <h3 id="definition-5"><strong>Definition</strong></h3> <p>A <strong>Security Group</strong> functions as a <strong>virtual firewall</strong> that controls <strong>inbound and outbound traffic</strong> for cloud resources.</p> <h3 id="key-features-2"><strong>Key Features</strong></h3> <p>✅ <strong>Stateful</strong> – When an inbound rule allows traffic, the response is automatically allowed</p> <p>✅ <strong>Inbound &amp; Outbound Rules</strong> – Defines allowed sources and destinations</p> <p>✅ <strong>Instance-Level Security</strong> – Attached to specific VMs or services</p> <h3 id="example-5"><strong>Example</strong></h3> <ul> <li><strong>AWS Security Groups</strong></li> <li><strong>Azure Network Security Groups (NSG)</strong></li> <li><strong>Google Cloud Firewall Rules</strong></li> </ul> <h3 id="use-case-5"><strong>Use Case</strong></h3> <ul> <li>Restricting <strong>SSH (port 22) access</strong> to specific IPs</li> <li>Allowing <strong>only HTTP/HTTPS traffic (ports 80 &amp; 443)</strong> to web servers</li> <li>Blocking <strong>all outbound traffic except specific ports</strong> for database security</li> </ul> <hr/> <h3 id="comparison-table-1"><strong>Comparison Table</strong></h3> <table> <thead> <tr> <th>Feature</th> <th>Virtual Network</th> <th>Load Balancer</th> <th>Security Group</th> </tr> </thead> <tbody> <tr> <td><strong>Purpose</strong></td> <td>Provides private networking</td> <td>Distributes traffic</td> <td>Controls access rules</td> </tr> <tr> <td><strong>Scope</strong></td> <td>Network-wide</td> <td>Application-wide</td> <td>Instance-level</td> </tr> <tr> <td><strong>Key Benefit</strong></td> <td>Isolates &amp; connects resources</td> <td>Ensures availability</td> <td>Enhances security</td> </tr> <tr> <td><strong>Example Use Case</strong></td> <td>Connecting multiple servers</td> <td>Scaling web apps</td> <td>Restricting unauthorized access</td> </tr> </tbody> </table> <hr/> <h3 id="how-they-work-together"><strong>How They Work Together</strong></h3> <ol> <li><strong>A Virtual Network (VNet/VPC)</strong> hosts cloud resources such as web servers and databases.</li> <li><strong>A Load Balancer</strong> distributes traffic across multiple servers inside the virtual network.</li> <li><strong>Security Groups</strong> enforce access control by allowing only specific types of traffic.</li> </ol> <hr/> <h3 id="example-scenario-deploying-a-scalable-web-application"><strong>Example Scenario: Deploying a Scalable Web Application</strong></h3> <ol> <li><strong>Virtual Network</strong> – Creates a private network with <strong>subnets</strong> for application and database layers.</li> <li><strong>Load Balancer</strong> – Distributes incoming traffic across <strong>multiple application servers</strong>.</li> <li><strong>Security Groups</strong> – Allows <strong>only HTTP/HTTPS</strong> traffic from users and restricts <strong>database access</strong>.</li> </ol> <h1 id="containers">Containers</h1> <p>A <strong>container</strong> is a lightweight, portable, and self-sufficient unit that includes an application along with its dependencies, libraries, and runtime environment. It ensures that the application runs consistently across different environments (development, testing, and production) without worrying about differences in system configurations.</p> <ul> <li>Containers are isolated from each other and the host system.</li> <li>They are more efficient than virtual machines because they share the same OS kernel.</li> <li>Common containerization technologies: Docker, Podman, LXC.</li> </ul> <h2 id="docker"><strong>Docker</strong></h2> <p>Docker is a popular <strong>containerization platform</strong> that enables developers to package applications into containers. It provides tools to create, manage, and distribute containers efficiently.</p> <p>Key Docker components:</p> <ul> <li><strong>Docker Engine</strong> – Runs and manages containers.</li> <li><strong>Docker Image</strong> – A lightweight, portable, and immutable file that contains application code and dependencies.</li> <li><strong>Docker Container</strong> – A running instance of a Docker image.</li> <li><strong>Docker Hub</strong> – A cloud-based registry for storing and sharing Docker images.</li> <li><strong>Docker Compose</strong> – A tool to define and manage multi-container applications.</li> </ul> <h2 id="kubernetes"><strong>Kubernetes</strong></h2> <p>Kubernetes (K8s) is an <strong>open-source container orchestration platform</strong> that automates the deployment, scaling, and management of containerized applications across multiple nodes.</p> <p>Key Kubernetes components:</p> <ul> <li><strong>Pod</strong> – The smallest deployable unit in Kubernetes, consisting of one or more containers.</li> <li><strong>Node</strong> – A machine (VM or physical) that runs Kubernetes-managed workloads.</li> <li><strong>Cluster</strong> – A set of nodes controlled by a Kubernetes master.</li> <li><strong>Deployment</strong> – Defines how an application should run and scale.</li> <li><strong>Service</strong> – Exposes an application running on a set of Pods to the network.</li> </ul> <h2 id="how-they-work-together-1"><strong>How They Work Together</strong></h2> <ul> <li><strong>Docker</strong> is used to create and manage containers.</li> <li><strong>Kubernetes</strong> orchestrates and manages multiple containers at scale.</li> <li>Kubernetes can run containers created by Docker or other container runtimes (like containerd or CRI-O).</li> </ul> <h2 id="containers-docker-and-kubernetes-explained-with-examples"><strong>Containers, Docker, and Kubernetes Explained with Examples</strong></h2> <h3 id="1-containers-example"><strong>1. Containers Example</strong></h3> <p>A container packages an application with all its dependencies to ensure consistent operation across different environments.</p> <p><strong>Example:</strong></p> <p>Consider a Python web application that uses Flask and specific system libraries. Rather than manually installing Flask and its dependencies on each machine, you can create a container with everything your app needs.</p> <p>A simple <strong>Dockerfile</strong> for this Flask app:</p> <div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Use an official Python runtime as a base image</span>
<span class="k">FROM</span><span class="s"> python:3.9</span>

<span class="c"># Set the working directory in the container</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="c"># Copy application files</span>
<span class="k">COPY</span><span class="s"> . .</span>

<span class="c"># Install dependencies</span>
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt

<span class="c"># Run the application</span>
<span class="k">CMD</span><span class="s"> ["python", "app.py"]</span>
</code></pre></div></div> <p>Now, you can <strong>build and run the container</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> flask-app <span class="nb">.</span>
docker run <span class="nt">-p</span> 5000:5000 flask-app
</code></pre></div></div> <p>Your app runs inside a container, ready to share with anyone—no dependency issues to worry about.</p> <hr/> <h3 id="2-docker-example"><strong>2. Docker Example</strong></h3> <p>Docker simplifies container creation and management.</p> <p><strong>Example: Running a MySQL database in a Docker container</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--name</span> my-mysql <span class="nt">-e</span> <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>my-secret-pw <span class="nt">-d</span> mysql:latest
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">docker run</code> → Starts a new container.</li> <li><code class="language-plaintext highlighter-rouge">-name my-mysql</code> → Names the container.</li> <li><code class="language-plaintext highlighter-rouge">e MYSQL_ROOT_PASSWORD=my-secret-pw</code> → Sets an environment variable.</li> <li><code class="language-plaintext highlighter-rouge">d mysql:latest</code> → Runs MySQL in the background.</li> </ul> <p>Just like that, you have a MySQL database running in a container—no complex setup required.</p> <hr/> <h3 id="3-kubernetes-example"><strong>3. Kubernetes Example</strong></h3> <p>Kubernetes is used to <strong>orchestrate multiple containers</strong> across a cluster.</p> <p>Let’s deploy a simple <strong>Nginx web server</strong> on Kubernetes.</p> <p><strong>Step 1: Define a Kubernetes Deployment (nginx-deployment.yaml)</strong></p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:latest</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div> <p>This configuration:</p> <ul> <li>Deploys <strong>3 replicas</strong> of an Nginx container.</li> <li>Uses the <strong>nginx:latest</strong> image.</li> <li>Exposes port <strong>80</strong> for web traffic.</li> </ul> <p><strong>Step 2: Apply the Deployment</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> nginx-deployment.yaml
</code></pre></div></div> <p>Kubernetes will create and manage <strong>three Nginx containers</strong>.</p> <p><strong>Step 3: Expose the Deployment as a Service</strong></p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
</code></pre></div></div> <p>Now, users can access Nginx through a <strong>LoadBalancer</strong>.</p> <p><strong>Step 4: Apply the Service</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> nginx-service.yaml
</code></pre></div></div> <p>Kubernetes ensures:</p> <ul> <li>The Nginx service runs <strong>even if a container crashes</strong>.</li> <li>The application scales <strong>automatically</strong>.</li> </ul> <hr/> <h3 id="summary"><strong>Summary</strong></h3> <table> <thead> <tr> <th>Feature</th> <th>Containers</th> <th>Docker</th> <th>Kubernetes</th> </tr> </thead> <tbody> <tr> <td>Purpose</td> <td>Isolate and run applications</td> <td>Create &amp; manage containers</td> <td>Orchestrate multiple containers</td> </tr> <tr> <td>Example</td> <td>Flask app running inside a container</td> <td>Running MySQL in Docker</td> <td>Deploying Nginx on Kubernetes</td> </tr> <tr> <td>Benefits</td> <td>Portable, fast, consistent</td> <td>Simplifies containerization</td> <td>Scales and automates deployments</td> </tr> </tbody> </table> <h1 id="network-and-subnet"><strong>Network and Subnet</strong></h1> <h2 id="1-network"><strong>1. Network</strong></h2> <p>A <strong>network</strong> is a system that allows devices (computers, servers, routers, etc.) to communicate with each other by sending and receiving data. Networks can be <strong>physical</strong> (wired or wireless) or <strong>virtual</strong> (like cloud networks).</p> <h3 id="types-of-networks"><strong>Types of Networks</strong></h3> <ol> <li><strong>Local Area Network (LAN)</strong> – Connects devices within a small area (e.g., home, office).</li> <li><strong>Wide Area Network (WAN)</strong> – Connects multiple LANs across large distances (e.g., the Internet).</li> <li><strong>Virtual Network (VPC/VNet)</strong> – A cloud-based network that connects resources in a virtual environment.</li> </ol> <hr/> <h2 id="2-subnet-subnetwork"><strong>2. Subnet (Subnetwork)</strong></h2> <p>A <strong>subnet</strong> is a <strong>smaller segment</strong> of a larger network, created to improve network efficiency, organization, and security. Subnetting divides a network into multiple <strong>logical segments</strong> to reduce congestion and optimize performance.</p> <h3 id="why-use-subnets"><strong>Why Use Subnets?</strong></h3> <p>✅ Improves <strong>network performance</strong> by reducing congestion</p> <p>✅ Enhances <strong>security</strong> by isolating critical resources</p> <p>✅ Allows <strong>better IP address management</strong></p> <p>✅ Enables <strong>scalability</strong> in large network infrastructures</p> <hr/> <h2 id="example-of-network-and-subnet"><strong>Example of Network and Subnet</strong></h2> <p>Imagine a company with <strong>one main network (10.0.0.0/16)</strong> and different departments:</p> <ul> <li><strong>HR Subnet</strong> → 10.0.1.0/24</li> <li><strong>IT Subnet</strong> → 10.0.2.0/24</li> <li><strong>Finance Subnet</strong> → 10.0.3.0/24</li> </ul> <p>Each subnet isolates traffic within its department, improving security and performance.</p> <hr/> <h2 id="subnet-mask"><strong>Subnet Mask</strong></h2> <p>A <strong>subnet mask</strong> defines the network and host portions of an IP address.</p> <table> <thead> <tr> <th>CIDR Notation</th> <th>Subnet Mask</th> <th>No. of Hosts</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">/8</code></td> <td><code class="language-plaintext highlighter-rouge">255.0.0.0</code></td> <td>16 million+</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">/16</code></td> <td><code class="language-plaintext highlighter-rouge">255.255.0.0</code></td> <td>65,536</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">/24</code></td> <td><code class="language-plaintext highlighter-rouge">255.255.255.0</code></td> <td>256</td> </tr> </tbody> </table> <p>Example:</p> <ul> <li>IP Address: <strong>192.168.1.10</strong></li> <li>Subnet Mask: <strong>255.255.255.0 (/24)</strong></li> <li>Network: <strong>192.168.1.0</strong></li> <li>Available Hosts: <strong>192.168.1.1 - 192.168.1.254</strong></li> </ul> <hr/> <h2 id="comparison-network-vs-subnet"><strong>Comparison: Network vs. Subnet</strong></h2> <table> <thead> <tr> <th>Feature</th> <th>Network</th> <th>Subnet</th> </tr> </thead> <tbody> <tr> <td><strong>Definition</strong></td> <td>A group of interconnected devices</td> <td>A smaller division of a network</td> </tr> <tr> <td><strong>Purpose</strong></td> <td>Enables communication</td> <td>Organizes and optimizes network traffic</td> </tr> <tr> <td><strong>Example</strong></td> <td><code class="language-plaintext highlighter-rouge">10.0.0.0/16</code> (entire network)</td> <td><code class="language-plaintext highlighter-rouge">10.0.1.0/24</code> (subnet within the network)</td> </tr> <tr> <td><strong>Key Benefit</strong></td> <td>Global connectivity</td> <td>Security, efficiency, and scalability</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="ml"/><category term="mlops"/><summary type="html"><![CDATA[Detailed explanations of concepts from `MLOps: Cloud Computing` blog]]></summary></entry><entry><title type="html">MLOps: Cloud Computing</title><link href="https://raghuhemadri.github.io/blog/2025/mlops-cloud/" rel="alternate" type="text/html" title="MLOps: Cloud Computing"/><published>2025-01-30T09:00:00+00:00</published><updated>2025-01-30T09:00:00+00:00</updated><id>https://raghuhemadri.github.io/blog/2025/mlops-cloud</id><content type="html" xml:base="https://raghuhemadri.github.io/blog/2025/mlops-cloud/"><![CDATA[<p>This section explores key concepts from the blog post in greater detail. If you’re new to these topics, you’ll find this overview valuable. If you’re pressed for time, you can skip ahead to the main content.</p> <p><a href="https://raghuhemadri.github.io/blog/2025/mlops-cloud-def/">Cloud Computing: Definitions</a></p> <h1 id="understanding-cloud-computing-in-mlops"><strong>Understanding Cloud Computing in MLOps</strong></h1> <p>Cloud computing has transformed how businesses and developers deploy, manage, and scale applications. For MLOps, cloud platforms deliver essential infrastructure and services for training, deploying, and monitoring machine learning models. This guide explores key cloud computing concepts through an MLOps lens, examining virtualization, containerization, networking, storage, and service models.</p> <hr/> <h2 id="1-traditional-challenges-without-cloud-computing"><strong>1. Traditional Challenges Without Cloud Computing</strong></h2> <p>To appreciate cloud computing’s benefits, let’s examine the challenges of managing on-premises infrastructure:</p> <h3 id="case-study-setting-up-an-on-premises-system"><strong>Case Study: Setting Up an On-Premises System</strong></h3> <p>A typical machine learning deployment in an on-premises environment requires:</p> <ul> <li><strong>Hardware setup</strong>: Purchasing and installing servers</li> <li><strong>Operating system installation</strong>: Configuring Linux OS and dependencies</li> <li><strong>Networking configuration</strong>: Implementing secure and efficient connectivity</li> <li><strong>Software setup</strong>: Installing middleware, databases, and application servers</li> <li><strong>Maintenance</strong>: Managing failures, updating certificates, handling outages</li> </ul> <p>This traditional approach proves time-consuming, costly, and difficult to scale.</p> <hr/> <h2 id="2-cloud-computing-fundamentals"><strong>2. Cloud Computing Fundamentals</strong></h2> <p>Cloud computing offers on-demand access to computing resources without physical hardware ownership. It encompasses:</p> <ul> <li><strong>Compute resources</strong>: Virtual machines, containers, and serverless runtimes</li> <li><strong>Storage services</strong>: Block, file, and object storage</li> <li><strong>Networking</strong>: Virtual networks, load balancers, and security groups</li> <li><strong>Management interfaces</strong>: CLI, GUI, and API access</li> </ul> <h3 id="building-a-cloud-from-scratch"><strong>Building a Cloud from Scratch</strong></h3> <p>A cloud infrastructure requires these core components:</p> <ul> <li><strong>Compute hardware</strong> (servers, CPUs, GPUs)</li> <li><strong>Persistent storage</strong> (block, object, or file storage)</li> <li><strong>Networking</strong> (IP allocation, routing, security)</li> <li><strong>Identity &amp; Access Management (IAM)</strong> (user authentication &amp; role-based access control)</li> <li><strong>Billing and monitoring</strong> (resource utilization tracking)</li> </ul> <p>Cloud computing simplifies these complexities through managed infrastructure.</p> <hr/> <h2 id="3-virtualization-in-cloud-computing"><strong>3. Virtualization in Cloud Computing</strong></h2> <h3 id="step-1-virtual-machines-vms"><strong>Step 1: Virtual Machines (VMs)</strong></h3> <p>Virtualization enables multiple OS environments to run on a single physical machine using a <strong>hypervisor</strong>.</p> <h3 id="types-of-virtualization"><strong>Types of Virtualization:</strong></h3> <ol> <li><strong>Type 1 (Bare Metal Hypervisor)</strong>: Runs directly on hardware (e.g., VMware ESXi, Xen, KVM)</li> <li><strong>Type 2 (Hosted Hypervisor)</strong>: Runs on top of an existing OS (e.g., VirtualBox, VMware Workstation)</li> </ol> <p>Virtualization enables:</p> <ul> <li>Resource efficiency through <strong>multi-tenancy</strong></li> <li>Easy scaling and migration of workloads</li> <li>Isolation between different applications</li> </ul> <hr/> <h2 id="4-containerization-a-lightweight-alternative"><strong>4. Containerization: A Lightweight Alternative</strong></h2> <p>While VMs virtualize hardware, <strong>containers</strong> virtualize the operating system, enabling multiple applications to share the same OS kernel.</p> <h3 id="key-differences-between-vms-and-containers"><strong>Key Differences Between VMs and Containers</strong></h3> <table> <thead> <tr> <th>Feature</th> <th>Virtual Machines</th> <th>Containers</th> </tr> </thead> <tbody> <tr> <td>OS Virtualization</td> <td>Each VM has its own OS</td> <td>All containers share the host OS</td> </tr> <tr> <td>Performance</td> <td>Higher overhead</td> <td>Lightweight and faster</td> </tr> <tr> <td>Startup Time</td> <td>Minutes</td> <td>Seconds</td> </tr> <tr> <td>Use Case</td> <td>Running multiple OSs on one machine</td> <td>Deploying microservices efficiently</td> </tr> </tbody> </table> <h3 id="building-a-containerized-application"><strong>Building a Containerized Application</strong></h3> <p>A <strong>Dockerfile</strong> defines the application environment:</p> <div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> python:3.11-slim-buster</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> requirements.txt /app</span>
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">--trusted-host</span> pypi.python.org <span class="nt">-r</span> requirements.txt
<span class="k">COPY</span><span class="s"> . /app</span>
<span class="k">EXPOSE</span><span class="s"> 5000</span>
<span class="k">CMD</span><span class="s"> ["python", "app.py"]</span>
</code></pre></div></div> <p>This ensures consistency across different environments.</p> <h3 id="container-orchestration"><strong>Container Orchestration</strong></h3> <p>Orchestrators like <strong>Kubernetes</strong> or <strong>Docker Swarm</strong> manage:</p> <ul> <li><strong>Replication</strong> (running multiple copies of containers)</li> <li><strong>Health monitoring</strong> (replacing failing containers)</li> <li><strong>Load balancing</strong> (evenly distributing traffic)</li> <li><strong>Scaling</strong> (adjusting resources based on demand)</li> </ul> <hr/> <h2 id="5-cloud-service-models"><strong>5. Cloud Service Models</strong></h2> <p>Cloud computing offers several service models:</p> <table> <thead> <tr> <th>Service Model</th> <th>What It Provides</th> <th>Example Providers</th> </tr> </thead> <tbody> <tr> <td><strong>IaaS (Infrastructure as a Service)</strong></td> <td>Virtual machines, storage, networking</td> <td>AWS EC2, Google Compute Engine</td> </tr> <tr> <td><strong>PaaS (Platform as a Service)</strong></td> <td>Managed OS, runtime, and middleware</td> <td>AWS Elastic Beanstalk, Google App Engine</td> </tr> <tr> <td><strong>CaaS (Containers as a Service)</strong></td> <td>Managed container orchestration</td> <td>AWS ECS, Google Kubernetes Engine</td> </tr> <tr> <td><strong>FaaS (Function as a Service)</strong></td> <td>Serverless computing, event-driven execution</td> <td>AWS Lambda, Azure Functions</td> </tr> <tr> <td><strong>SaaS (Software as a Service)</strong></td> <td>Ready-to-use applications</td> <td>Google Drive, Gmail, Dropbox</td> </tr> </tbody> </table> <p>Each model abstracts different levels of infrastructure management.</p> <hr/> <h2 id="6-cloud-deployment-models"><strong>6. Cloud Deployment Models</strong></h2> <p>Organizations can deploy cloud services through various models:</p> <ul> <li><strong>Public Cloud</strong>: Resources shared across multiple organizations (e.g., AWS, Azure, GCP)</li> <li><strong>Private Cloud</strong>: Dedicated infrastructure for a single organization (e.g., OpenStack)</li> <li><strong>Hybrid Cloud</strong>: Combination of public and private clouds</li> <li><strong>Multi-Cloud</strong>: Using multiple cloud providers for redundancy and cost-efficiency</li> </ul> <p>The choice depends on security requirements, costs, and control needs.</p> <hr/> <h2 id="7-storage-in-the-cloud"><strong>7. Storage in the Cloud</strong></h2> <p>Cloud storage comes in three main categories:</p> <ol> <li><strong>Block Storage</strong> (like hard drives, used for databases)</li> <li><strong>File Storage</strong> (hierarchical structure, used for shared access)</li> <li><strong>Object Storage</strong> (scalable storage for unstructured data, e.g., AWS S3)</li> </ol> <p>Key characteristics:</p> <ul> <li><strong>Ephemeral vs Persistent Storage</strong>: Ephemeral storage vanishes when a VM shuts down, while persistent storage retains data</li> <li><strong>No In-Place Updates in Object Storage</strong>: Unlike traditional file systems, object storage uses versioning</li> </ul> <hr/> <h2 id="8-networking-in-the-cloud"><strong>8. Networking in the Cloud</strong></h2> <p>Cloud networking offers:</p> <ul> <li><strong>Private IPs</strong> for internal communication</li> <li><strong>Public IPs</strong> for external access</li> <li><strong>Subnets</strong> to segment networks</li> <li><strong>Load balancers</strong> to distribute traffic</li> <li><strong>Security groups and firewalls</strong> to restrict access</li> </ul> <h3 id="cloud-networking-example"><strong>Cloud Networking Example</strong></h3> <ul> <li><strong>Public Network (Internet-facing)</strong>: <ul> <li>Hosts external services (e.g., web apps)</li> <li>Uses <strong>public IPs</strong></li> </ul> </li> <li><strong>Private Network (Internal communication)</strong>: <ul> <li>Contains databases and internal services</li> <li>Uses <strong>private IPs</strong> (e.g., 10.0.0.0/24)</li> </ul> </li> </ul> <h3 id="addressing-in-the-cloud"><strong>Addressing in the Cloud</strong></h3> <ul> <li><strong>MAC Address</strong> (Local network communication)</li> <li><strong>IPv4 Address</strong> (Global communication)</li> <li><strong>Private IP Ranges</strong>: <ul> <li>10.0.0.0 – 10.255.255.255</li> <li>172.16.0.0 – 172.31.255.255</li> <li>192.168.0.0 – 192.168.255.255</li> </ul> </li> </ul> <hr/> <h2 id="9-openstack-a-cloud-computing-framework"><strong>9. OpenStack: A Cloud Computing Framework</strong></h2> <p>OpenStack is an open-source cloud platform providing:</p> <ul> <li><strong>Compute</strong>: Nova (VMs), Zun (Containers), Ironic (Bare metal)</li> <li><strong>Networking</strong>: Neutron (Manages network connectivity)</li> <li><strong>Storage</strong>: Cinder (Block), Swift (Object), Manila (File)</li> <li><strong>Shared Services</strong>: Glance (Image management), Keystone (Identity &amp; Access Management)</li> <li><strong>User Interfaces</strong>: Horizon (Web UI), OpenStack CLI, Python SDK</li> </ul> <p>OpenStack serves as a popular choice for private cloud deployments.</p> <hr/> <h2 id="10-the-future-of-cloud-computing"><strong>10. The Future of Cloud Computing</strong></h2> <p>Beyond traditional virtualization and containers, <strong>serverless computing</strong> (Function-as-a-Service) is revolutionizing cloud services. FaaS lets developers focus purely on code, eliminating infrastructure management concerns.</p> <h3 id="key-trends-in-cloud-computing"><strong>Key Trends in Cloud Computing</strong></h3> <ul> <li><strong>Edge Computing</strong>: Processing data closer to users</li> <li><strong>AI/ML Integration</strong>: Cloud providers offering AI model deployment platforms</li> <li><strong>Hybrid and Multi-Cloud Adoption</strong>: Avoiding vendor lock-in</li> <li><strong>Quantum Computing in the Cloud</strong>: Cloud-based quantum computing services emerging</li> </ul> <hr/> <h2 id="conclusion"><strong>Conclusion</strong></h2> <p>Cloud computing forms the backbone of modern MLOps, providing scalable, flexible, and cost-effective infrastructure for machine learning models. Understanding cloud service models, virtualization, containerization, storage, and networking is crucial for building efficient MLOps pipelines.</p> <p>By embracing cloud solutions, organizations can accelerate AI/ML deployments, enhance collaboration, and optimize infrastructure costs. Whether leveraging <strong>IaaS for scalable training environments</strong>, <strong>PaaS for streamlined deployments</strong>, or <strong>serverless architectures for inference</strong>, cloud computing is essential for modern MLOps.</p> <p><strong>What’s next?</strong> Build cloud-based ML pipelines, explore OpenStack, or master Kubernetes for container orchestration in MLOps.</p> <hr/>]]></content><author><name></name></author><category term="ml"/><category term="mlops"/><summary type="html"><![CDATA[Cloud Computing Basics for MLOps]]></summary></entry><entry><title type="html">Low-Level Design: A Comprehensive Guide</title><link href="https://raghuhemadri.github.io/blog/2025/lld/" rel="alternate" type="text/html" title="Low-Level Design: A Comprehensive Guide"/><published>2025-01-28T09:00:00+00:00</published><updated>2025-01-28T09:00:00+00:00</updated><id>https://raghuhemadri.github.io/blog/2025/lld</id><content type="html" xml:base="https://raghuhemadri.github.io/blog/2025/lld/"><![CDATA[<h1 id="chapter-1-introduction-to-design-patterns"><strong>Chapter 1: Introduction to Design Patterns</strong></h1> <h2 id="theoretical-significance-of-design-patterns-in-software-engineering"><strong>Theoretical Significance of Design Patterns in Software Engineering</strong></h2> <p>Design patterns constitute a compendium of best practices that provide pre-established solutions to frequently encountered problems in software architecture. These patterns underpin the development of flexible, extensible, and maintainable systems by enabling robust abstractions and facilitating code reuse. A profound understanding of design patterns empowers developers to construct resilient systems that are both testable and scalable.</p> <p>Design patterns address common software design challenges such as:</p> <ol> <li>Reducing tight coupling between components.</li> <li>Enhancing scalability and flexibility of systems.</li> <li>Improving code readability and maintainability.</li> </ol> <p>For example, the <strong>Observer Pattern</strong> can be used in a stock market application to notify multiple clients of changes in stock prices.</p> <h2 id="taxonomy-of-design-patterns"><strong>Taxonomy of Design Patterns</strong></h2> <p>Design patterns are systematically classified into three overarching categories:</p> <ol> <li><strong>Creational Patterns</strong>: These deal with object creation mechanisms and abstract the instantiation process to make systems independent of the objects they create. Examples: <ul> <li><strong>Factory</strong>: Centralizes object creation logic.</li> <li><strong>Singleton</strong>: Ensures only one instance of a class exists.</li> </ul> </li> <li><strong>Structural Patterns</strong>: These focus on composing classes and objects into larger structures while ensuring that the overall architecture remains flexible and efficient. Examples: <ul> <li><strong>Adapter</strong>: Makes incompatible interfaces work together.</li> <li><strong>Composite</strong>: Models part-whole hierarchies using tree structures.</li> </ul> </li> <li><strong>Behavioral Patterns</strong>: These deal with communication and interaction between objects. Examples: <ul> <li><strong>Strategy</strong>: Defines interchangeable algorithms encapsulated within a class.</li> <li><strong>Observer</strong>: Establishes a one-to-many dependency between objects.</li> </ul> </li> </ol> <h2 id="unified-modeling-language-uml-as-a-visualization-tool"><strong>Unified Modeling Language (UML) as a Visualization Tool</strong></h2> <p>Unified Modeling Language (UML) diagrams are indispensable tools for visualizing, specifying, constructing, and documenting software systems. Key diagram types include:</p> <ul> <li><strong>Class Diagrams</strong>: Represent the structure of a system by showing its classes, attributes, and relationships.</li> <li><strong>Sequence Diagrams</strong>: Highlight object interactions over time. Example: A sequence diagram for user authentication.</li> <li><strong>State Diagrams</strong>: Illustrate state transitions of an object in response to events. Example: The lifecycle of a TCP connection.</li> <li><strong>Activity Diagrams</strong>: Describe workflows and the sequence of actions within a process.</li> </ul> <h3 id="practical-example-observer-pattern-in-python"><strong>Practical Example: Observer Pattern in Python</strong></h3> <p>Imagine a stock market application where multiple clients (observers) need updates when stock prices change:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Stock</span><span class="p">:</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">symbol</span><span class="p">):</span>
       <span class="n">self</span><span class="p">.</span><span class="n">symbol</span> <span class="o">=</span> <span class="n">symbol</span>
       <span class="n">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="n">self</span><span class="p">.</span><span class="n">observers</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
       <span class="n">self</span><span class="p">.</span><span class="n">observers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>

   <span class="k">def</span> <span class="nf">remove_observer</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
       <span class="n">self</span><span class="p">.</span><span class="n">observers</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>

   <span class="k">def</span> <span class="nf">set_price</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">price</span><span class="p">):</span>
       <span class="n">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
       <span class="n">self</span><span class="p">.</span><span class="nf">notify_observers</span><span class="p">()</span>

   <span class="k">def</span> <span class="nf">notify_observers</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
       <span class="k">for</span> <span class="n">observer</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">observers</span><span class="p">:</span>
           <span class="n">observer</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Investor</span><span class="p">:</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
       <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

   <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">stock</span><span class="p">):</span>
       <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> notified of </span><span class="si">{</span><span class="n">stock</span><span class="p">.</span><span class="n">symbol</span><span class="si">}</span><span class="s"> price change to </span><span class="si">{</span><span class="n">stock</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">apple</span> <span class="o">=</span> <span class="nc">Stock</span><span class="p">(</span><span class="sh">"</span><span class="s">AAPL</span><span class="sh">"</span><span class="p">)</span>
<span class="n">john</span> <span class="o">=</span> <span class="nc">Investor</span><span class="p">(</span><span class="sh">"</span><span class="s">John</span><span class="sh">"</span><span class="p">)</span>
<span class="n">mary</span> <span class="o">=</span> <span class="nc">Investor</span><span class="p">(</span><span class="sh">"</span><span class="s">Mary</span><span class="sh">"</span><span class="p">)</span>

<span class="n">apple</span><span class="p">.</span><span class="nf">add_observer</span><span class="p">(</span><span class="n">john</span><span class="p">)</span>
<span class="n">apple</span><span class="p">.</span><span class="nf">add_observer</span><span class="p">(</span><span class="n">mary</span><span class="p">)</span>

<span class="n">apple</span><span class="p">.</span><span class="nf">set_price</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span>
<span class="c1"># Output:
# John notified of AAPL price change to 150
# Mary notified of AAPL price change to 150
</span></code></pre></div></div> <p>This example demonstrates how the <strong>Observer Pattern</strong> decouples the stock from the investors, making the system more flexible and maintainable.</p> <h1 id="chapter-2-foundational-principles-of-object-oriented-design"><strong>Chapter 2: Foundational Principles of Object-Oriented Design</strong></h1> <h2 id="encapsulation"><strong>Encapsulation</strong></h2> <p>Encapsulation is the principle of bundling data (attributes) and methods (functions) that operate on the data into a single unit, typically a class. It restricts access to some of an object’s components, which is critical for protecting the integrity of the data and hiding implementation details. Encapsulation is achieved through access modifiers like private, protected, and public.</p> <h3 id="example"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BankAccount</span><span class="p">:</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">account_number</span><span class="p">,</span> <span class="n">balance</span><span class="p">):</span>
       <span class="n">self</span><span class="p">.</span><span class="n">__account_number</span> <span class="o">=</span> <span class="n">account_number</span>  <span class="c1"># Private attribute
</span>       <span class="n">self</span><span class="p">.</span><span class="n">__balance</span> <span class="o">=</span> <span class="n">balance</span>

   <span class="k">def</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
       <span class="k">if</span> <span class="n">amount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
           <span class="n">self</span><span class="p">.</span><span class="n">__balance</span> <span class="o">+=</span> <span class="n">amount</span>
           <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Deposited </span><span class="si">{</span><span class="n">amount</span><span class="si">}</span><span class="s">. New balance is </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">__balance</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
       <span class="k">else</span><span class="p">:</span>
           <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Deposit amount must be positive.</span><span class="sh">"</span><span class="p">)</span>

   <span class="k">def</span> <span class="nf">withdraw</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
       <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">amount</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">__balance</span><span class="p">:</span>
           <span class="n">self</span><span class="p">.</span><span class="n">__balance</span> <span class="o">-=</span> <span class="n">amount</span>
           <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Withdrew </span><span class="si">{</span><span class="n">amount</span><span class="si">}</span><span class="s">. Remaining balance is </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">__balance</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
       <span class="k">else</span><span class="p">:</span>
           <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Invalid withdrawal amount.</span><span class="sh">"</span><span class="p">)</span>

   <span class="k">def</span> <span class="nf">get_balance</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
       <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">__balance</span>

<span class="c1"># Example usage
</span><span class="n">account</span> <span class="o">=</span> <span class="nc">BankAccount</span><span class="p">(</span><span class="sh">"</span><span class="s">12345</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>

<span class="n">account</span><span class="p">.</span><span class="nf">deposit</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
<span class="n">account</span><span class="p">.</span><span class="nf">withdraw</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="nf">get_balance</span><span class="p">())</span>  <span class="c1"># Output: 1300
</span></code></pre></div></div> <p>In this example, encapsulation ensures that the __balance attribute cannot be directly accessed or modified, protecting the account’s integrity.</p> <h2 id="inheritance"><strong>Inheritance</strong></h2> <p>Inheritance allows a class (child) to inherit attributes and methods from another class (parent), promoting code reuse and hierarchical relationships. However, inheritance must be used judiciously to avoid excessive coupling.</p> <h3 id="example-1"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Vehicle</span><span class="p">:</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">brand</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
       <span class="n">self</span><span class="p">.</span><span class="n">brand</span> <span class="o">=</span> <span class="n">brand</span>
       <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>

   <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
       <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Starting </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">brand</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Car</span><span class="p">(</span><span class="n">Vehicle</span><span class="p">):</span>
   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">brand</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">doors</span><span class="p">):</span>
       <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">brand</span><span class="p">,</span> <span class="n">model</span><span class="p">)</span>
       <span class="n">self</span><span class="p">.</span><span class="n">doors</span> <span class="o">=</span> <span class="n">doors</span>

   <span class="k">def</span> <span class="nf">honk</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
       <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">brand</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="si">}</span><span class="s"> goes </span><span class="sh">'</span><span class="s">beep beep</span><span class="sh">'</span><span class="s">!</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">my_car</span> <span class="o">=</span> <span class="nc">Car</span><span class="p">(</span><span class="sh">"</span><span class="s">Toyota</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Corolla</span><span class="sh">"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="n">my_car</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
<span class="n">my_car</span><span class="p">.</span><span class="nf">honk</span><span class="p">()</span>
</code></pre></div></div> <h2 id="polymorphism"><strong>Polymorphism</strong></h2> <p>Polymorphism allows objects to be treated as instances of their parent class rather than their actual class. This enables the use of a single interface to represent different types.</p> <h3 id="example-2"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Animal</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Dog</span><span class="p">(</span><span class="n">Animal</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Woof!</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Cat</span><span class="p">(</span><span class="n">Animal</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Meow!</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">animals</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Dog</span><span class="p">(),</span> <span class="nc">Cat</span><span class="p">()]</span>
<span class="k">for</span> <span class="n">animal</span> <span class="ow">in</span> <span class="n">animals</span><span class="p">:</span>
    <span class="n">animal</span><span class="p">.</span><span class="nf">speak</span><span class="p">()</span>
</code></pre></div></div> <h2 id="abstraction"><strong>Abstraction</strong></h2> <p>Abstraction focuses on exposing only essential details and hiding the implementation. It is typically achieved using abstract classes or interfaces.</p> <h3 id="example-3"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="k">class</span> <span class="nc">Shape</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">area</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">perimeter</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Rectangle</span><span class="p">(</span><span class="n">Shape</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
        <span class="n">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>

    <span class="k">def</span> <span class="nf">area</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">height</span>

    <span class="k">def</span> <span class="nf">perimeter</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">rect</span> <span class="o">=</span> <span class="nc">Rectangle</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Area:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="nf">area</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Perimeter:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="nf">perimeter</span><span class="p">())</span>
</code></pre></div></div> <h1 id="chapter-3-core-design-philosophies"><strong>Chapter 3: Core Design Philosophies</strong></h1> <h2 id="encapsulate-what-varies"><strong>Encapsulate What Varies</strong></h2> <p>Encapsulating what varies involves identifying volatile components of a system and isolating them, enabling easier modification without impacting the stable parts. This philosophy lies at the heart of many design patterns, including Strategy and Observer.</p> <h3 id="example-using-strategy-pattern"><strong>Example: Using Strategy Pattern</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PaymentStrategy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">pay</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">CreditCardPayment</span><span class="p">(</span><span class="n">PaymentStrategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">pay</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Paid </span><span class="si">{</span><span class="n">amount</span><span class="si">}</span><span class="s"> using Credit Card.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">PayPalPayment</span><span class="p">(</span><span class="n">PaymentStrategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">pay</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Paid </span><span class="si">{</span><span class="n">amount</span><span class="si">}</span><span class="s"> using PayPal.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ShoppingCart</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add_item</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">calculate_total</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">sum</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="sh">'</span><span class="s">price</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">checkout</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">payment_strategy</span><span class="p">):</span>
        <span class="n">total</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">calculate_total</span><span class="p">()</span>
        <span class="n">payment_strategy</span><span class="p">.</span><span class="nf">pay</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">cart</span> <span class="o">=</span> <span class="nc">ShoppingCart</span><span class="p">()</span>
<span class="n">cart</span><span class="p">.</span><span class="nf">add_item</span><span class="p">({</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Laptop</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">price</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1000</span><span class="p">})</span>
<span class="n">cart</span><span class="p">.</span><span class="nf">add_item</span><span class="p">({</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Mouse</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">price</span><span class="sh">'</span><span class="p">:</span> <span class="mi">50</span><span class="p">})</span>

<span class="n">cart</span><span class="p">.</span><span class="nf">checkout</span><span class="p">(</span><span class="nc">CreditCardPayment</span><span class="p">())</span>
<span class="n">cart</span><span class="p">.</span><span class="nf">checkout</span><span class="p">(</span><span class="nc">PayPalPayment</span><span class="p">())</span>
</code></pre></div></div> <h2 id="program-to-an-interface-not-an-implementation"><strong>Program to an Interface, Not an Implementation</strong></h2> <p>This principle ensures that code depends on abstractions rather than specific implementations, making it easier to extend and modify without affecting existing code.</p> <h3 id="example-4"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="k">class</span> <span class="nc">NotificationService</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">send_notification</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">EmailNotification</span><span class="p">(</span><span class="n">NotificationService</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">send_notification</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Sending Email: </span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SMSNotification</span><span class="p">(</span><span class="n">NotificationService</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">send_notification</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Sending SMS: </span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">NotificationManager</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">service</span><span class="p">:</span> <span class="n">NotificationService</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">service</span>

    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">service</span><span class="p">.</span><span class="nf">send_notification</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">email_service</span> <span class="o">=</span> <span class="nc">EmailNotification</span><span class="p">()</span>
<span class="n">sms_service</span> <span class="o">=</span> <span class="nc">SMSNotification</span><span class="p">()</span>

<span class="n">manager</span> <span class="o">=</span> <span class="nc">NotificationManager</span><span class="p">(</span><span class="n">email_service</span><span class="p">)</span>
<span class="n">manager</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello via Email!</span><span class="sh">"</span><span class="p">)</span>

<span class="n">manager</span> <span class="o">=</span> <span class="nc">NotificationManager</span><span class="p">(</span><span class="n">sms_service</span><span class="p">)</span>
<span class="n">manager</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello via SMS!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h2 id="favor-composition-over-inheritance"><strong>Favor Composition Over Inheritance</strong></h2> <p>Favoring composition involves designing systems where objects are composed with behaviors rather than relying on deep inheritance hierarchies. This makes the system more modular and easier to modify.</p> <h3 id="example-5"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Engine</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Engine started.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Car</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">engine</span><span class="p">:</span> <span class="n">Engine</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">engine</span> <span class="o">=</span> <span class="n">engine</span>

    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">engine</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Car is ready to drive.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">engine</span> <span class="o">=</span> <span class="nc">Engine</span><span class="p">()</span>
<span class="n">car</span> <span class="o">=</span> <span class="nc">Car</span><span class="p">(</span><span class="n">engine</span><span class="p">)</span>
<span class="n">car</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
</code></pre></div></div> <h1 id="chapter-4-the-solid-design-principles"><strong>Chapter 4: The SOLID Design Principles</strong></h1> <h2 id="single-responsibility-principle-srp"><strong>Single Responsibility Principle (SRP)</strong></h2> <p>A class must have only one responsibility, meaning it should encapsulate a singular concern. This reduces the likelihood of introducing errors when modifying the system. For example:</p> <h3 id="example-6"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Invoice</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">items</span><span class="p">,</span> <span class="n">total</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">items</span>
        <span class="n">self</span><span class="p">.</span><span class="n">total</span> <span class="o">=</span> <span class="n">total</span>

<span class="k">class</span> <span class="nc">InvoicePrinter</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">print_invoice</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">invoice</span><span class="p">:</span> <span class="n">Invoice</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Invoice Details:</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">invoice</span><span class="p">.</span><span class="n">items</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">- </span><span class="si">{</span><span class="n">item</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total: </span><span class="si">{</span><span class="n">invoice</span><span class="p">.</span><span class="n">total</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">invoice</span> <span class="o">=</span> <span class="nc">Invoice</span><span class="p">([</span><span class="sh">"</span><span class="s">Item1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Item2</span><span class="sh">"</span><span class="p">],</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">printer</span> <span class="o">=</span> <span class="nc">InvoicePrinter</span><span class="p">()</span>
<span class="n">printer</span><span class="p">.</span><span class="nf">print_invoice</span><span class="p">(</span><span class="n">invoice</span><span class="p">)</span>
</code></pre></div></div> <h2 id="openclosed-principle-ocp"><strong>Open/Closed Principle (OCP)</strong></h2> <p>Classes should be open for extension but closed for modification. This ensures that new functionality can be added without altering existing code.</p> <h3 id="example-7"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Discount</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">total</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">total</span>

<span class="k">class</span> <span class="nc">SeasonalDiscount</span><span class="p">(</span><span class="n">Discount</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">total</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">total</span> <span class="o">*</span> <span class="mf">0.9</span>

<span class="k">class</span> <span class="nc">ClearanceDiscount</span><span class="p">(</span><span class="n">Discount</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">total</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">total</span> <span class="o">*</span> <span class="mf">0.8</span>

<span class="k">class</span> <span class="nc">Cart</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">total</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">total</span> <span class="o">=</span> <span class="n">total</span>

    <span class="k">def</span> <span class="nf">apply_discount</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">discount</span><span class="p">:</span> <span class="n">Discount</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">total</span> <span class="o">=</span> <span class="n">discount</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">total</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">cart</span> <span class="o">=</span> <span class="nc">Cart</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="n">cart</span><span class="p">.</span><span class="nf">apply_discount</span><span class="p">(</span><span class="nc">SeasonalDiscount</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cart</span><span class="p">.</span><span class="n">total</span><span class="p">)</span>  <span class="c1"># Output: 90
</span></code></pre></div></div> <h2 id="liskov-substitution-principle-lsp"><strong>Liskov Substitution Principle (LSP)</strong></h2> <p>Subtypes must be substitutable for their base types without altering the correctness of the program. This ensures that derived classes extend functionality without changing the expected behavior.</p> <h3 id="example-8"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Bird</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">fly</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">This bird can fly.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Sparrow</span><span class="p">(</span><span class="n">Bird</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">fly</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sparrow flying high.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Ostrich</span><span class="p">(</span><span class="n">Bird</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">fly</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sh">"</span><span class="s">Ostriches can</span><span class="sh">'</span><span class="s">t fly.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Correct implementation
</span><span class="k">class</span> <span class="nc">FlightlessBird</span><span class="p">(</span><span class="n">Bird</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">fly</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">This bird doesn</span><span class="sh">'</span><span class="s">t fly.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Penguin</span><span class="p">(</span><span class="n">FlightlessBird</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="c1"># Example usage
</span><span class="n">birds</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Sparrow</span><span class="p">(),</span> <span class="nc">Penguin</span><span class="p">()]</span>
<span class="k">for</span> <span class="n">bird</span> <span class="ow">in</span> <span class="n">birds</span><span class="p">:</span>
    <span class="n">bird</span><span class="p">.</span><span class="nf">fly</span><span class="p">()</span>
</code></pre></div></div> <h2 id="interface-segregation-principle-isp"><strong>Interface Segregation Principle (ISP)</strong></h2> <p>Clients should not be forced to depend on methods they do not use. This can be achieved by creating smaller, more specific interfaces.</p> <h3 id="example-9"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Printer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">print_document</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Scanner</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">scan_document</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">AllInOnePrinter</span><span class="p">(</span><span class="n">Printer</span><span class="p">,</span> <span class="n">Scanner</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">print_document</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Printing document...</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">scan_document</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Scanning document...</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">printer</span> <span class="o">=</span> <span class="nc">AllInOnePrinter</span><span class="p">()</span>
<span class="n">printer</span><span class="p">.</span><span class="nf">print_document</span><span class="p">()</span>
<span class="n">printer</span><span class="p">.</span><span class="nf">scan_document</span><span class="p">()</span>
</code></pre></div></div> <h2 id="dependency-inversion-principle-dip"><strong>Dependency Inversion Principle (DIP)</strong></h2> <p>High-level modules should not depend on low-level modules. Both should depend on abstractions.</p> <h3 id="example-10"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="k">class</span> <span class="nc">NotificationService</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">EmailService</span><span class="p">(</span><span class="n">NotificationService</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Sending Email: </span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SMSService</span><span class="p">(</span><span class="n">NotificationService</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Sending SMS: </span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">NotificationManager</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">service</span><span class="p">:</span> <span class="n">NotificationService</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">service</span>

    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">service</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">email_service</span> <span class="o">=</span> <span class="nc">EmailService</span><span class="p">()</span>
<span class="n">manager</span> <span class="o">=</span> <span class="nc">NotificationManager</span><span class="p">(</span><span class="n">email_service</span><span class="p">)</span>
<span class="n">manager</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello World</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h1 id="chapter-5-creational-design-patterns"><strong>Chapter 5: Creational Design Patterns</strong></h1> <h2 id="simple-factory"><strong>Simple Factory</strong></h2> <p>The Simple Factory pattern centralizes object creation logic, encapsulating the instantiation process within a single factory class. This pattern provides a convenient way to create objects without exposing the underlying instantiation logic to the client.</p> <h3 id="example-11"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Shape</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Circle</span><span class="p">(</span><span class="n">Shape</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Drawing a Circle</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Square</span><span class="p">(</span><span class="n">Shape</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Drawing a Square</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ShapeFactory</span><span class="p">:</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_shape</span><span class="p">(</span><span class="n">shape_type</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">shape_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">circle</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">Circle</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">shape_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">square</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">Square</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">Unknown shape type</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">shape</span> <span class="o">=</span> <span class="n">ShapeFactory</span><span class="p">.</span><span class="nf">create_shape</span><span class="p">(</span><span class="sh">"</span><span class="s">circle</span><span class="sh">"</span><span class="p">)</span>
<span class="n">shape</span><span class="p">.</span><span class="nf">draw</span><span class="p">()</span>  <span class="c1"># Output: Drawing a Circle
</span></code></pre></div></div> <h2 id="singleton-pattern"><strong>Singleton Pattern</strong></h2> <p>The Singleton Pattern ensures that a class has only one instance and provides a global access point to that instance. It is commonly used for managing shared resources such as configuration settings or database connections.</p> <h3 id="example-12"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Singleton</span><span class="p">:</span>
    <span class="n">_instance</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">cls</span><span class="p">.</span><span class="n">_instance</span><span class="p">:</span>
            <span class="n">cls</span><span class="p">.</span><span class="n">_instance</span> <span class="o">=</span> <span class="nf">super</span><span class="p">().</span><span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="n">_instance</span>

<span class="c1"># Example usage
</span><span class="n">singleton1</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="p">()</span>
<span class="n">singleton2</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">singleton1</span> <span class="ow">is</span> <span class="n">singleton2</span><span class="p">)</span>  <span class="c1"># Output: True
</span></code></pre></div></div> <h2 id="factory-method-pattern"><strong>Factory Method Pattern</strong></h2> <p>The Factory Method pattern defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.</p> <h3 id="example-13"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="k">class</span> <span class="nc">Shape</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Circle</span><span class="p">(</span><span class="n">Shape</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Drawing a Circle</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Square</span><span class="p">(</span><span class="n">Shape</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Drawing a Square</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ShapeFactory</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">create_shape</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">CircleFactory</span><span class="p">(</span><span class="n">ShapeFactory</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">create_shape</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">Circle</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">SquareFactory</span><span class="p">(</span><span class="n">ShapeFactory</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">create_shape</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">Square</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">factory</span> <span class="o">=</span> <span class="nc">CircleFactory</span><span class="p">()</span>
<span class="n">shape</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">create_shape</span><span class="p">()</span>
<span class="n">shape</span><span class="p">.</span><span class="nf">draw</span><span class="p">()</span>
</code></pre></div></div> <h2 id="abstract-factory-pattern"><strong>Abstract Factory Pattern</strong></h2> <p>The Abstract Factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes. This pattern is useful when the client code needs to work with a group of related objects that are designed to work together.</p> <h3 id="example-14"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="c1"># Abstract product classes
</span><span class="k">class</span> <span class="nc">Chair</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">sit_on</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Table</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="c1"># Concrete product classes
</span><span class="k">class</span> <span class="nc">ModernChair</span><span class="p">(</span><span class="n">Chair</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">sit_on</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sitting on a modern chair.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ModernTable</span><span class="p">(</span><span class="n">Table</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Using a modern table.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">VictorianChair</span><span class="p">(</span><span class="n">Chair</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">sit_on</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sitting on a Victorian chair.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">VictorianTable</span><span class="p">(</span><span class="n">Table</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Using a Victorian table.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Abstract factory
</span><span class="k">class</span> <span class="nc">FurnitureFactory</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">create_chair</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">create_table</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="c1"># Concrete factories
</span><span class="k">class</span> <span class="nc">ModernFurnitureFactory</span><span class="p">(</span><span class="n">FurnitureFactory</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">create_chair</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">ModernChair</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">create_table</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">ModernTable</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">VictorianFurnitureFactory</span><span class="p">(</span><span class="n">FurnitureFactory</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">create_chair</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">VictorianChair</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">create_table</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">VictorianTable</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="k">def</span> <span class="nf">create_furniture</span><span class="p">(</span><span class="n">factory</span><span class="p">:</span> <span class="n">FurnitureFactory</span><span class="p">):</span>
    <span class="n">chair</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">create_chair</span><span class="p">()</span>
    <span class="n">table</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">create_table</span><span class="p">()</span>
    <span class="n">chair</span><span class="p">.</span><span class="nf">sit_on</span><span class="p">()</span>
    <span class="n">table</span><span class="p">.</span><span class="nf">use</span><span class="p">()</span>

<span class="n">modern_factory</span> <span class="o">=</span> <span class="nc">ModernFurnitureFactory</span><span class="p">()</span>
<span class="n">victorian_factory</span> <span class="o">=</span> <span class="nc">VictorianFurnitureFactory</span><span class="p">()</span>

<span class="nf">create_furniture</span><span class="p">(</span><span class="n">modern_factory</span><span class="p">)</span>
<span class="nf">create_furniture</span><span class="p">(</span><span class="n">victorian_factory</span><span class="p">)</span>
</code></pre></div></div> <h2 id="builder-pattern"><strong>Builder Pattern</strong></h2> <p>The Builder pattern separates the construction of a complex object from its representation so that the same construction process can create different representations. It is particularly useful when an object has many optional parts.</p> <h3 id="example-15"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Product class
</span><span class="k">class</span> <span class="nc">House</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">wall_material</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">door_type</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">num_windows</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">House with </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">wall_material</span><span class="si">}</span><span class="s"> walls, </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">door_type</span><span class="si">}</span><span class="s"> door, and </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">num_windows</span><span class="si">}</span><span class="s"> windows.</span><span class="sh">"</span>

<span class="c1"># Abstract builder
</span><span class="k">class</span> <span class="nc">HouseBuilder</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">set_wall_material</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">material</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">set_door_type</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">door_type</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">set_num_windows</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="c1"># Concrete builder
</span><span class="k">class</span> <span class="nc">ConcreteHouseBuilder</span><span class="p">(</span><span class="n">HouseBuilder</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">house</span> <span class="o">=</span> <span class="nc">House</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">set_wall_material</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">material</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">house</span><span class="p">.</span><span class="n">wall_material</span> <span class="o">=</span> <span class="n">material</span>

    <span class="k">def</span> <span class="nf">set_door_type</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">door_type</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">house</span><span class="p">.</span><span class="n">door_type</span> <span class="o">=</span> <span class="n">door_type</span>

    <span class="k">def</span> <span class="nf">set_num_windows</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">house</span><span class="p">.</span><span class="n">num_windows</span> <span class="o">=</span> <span class="n">count</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">house</span>

<span class="c1"># Director
</span><span class="k">class</span> <span class="nc">HouseDirector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">builder</span><span class="p">:</span> <span class="n">HouseBuilder</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span>

    <span class="k">def</span> <span class="nf">construct</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">set_wall_material</span><span class="p">(</span><span class="sh">"</span><span class="s">brick</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">set_door_type</span><span class="p">(</span><span class="sh">"</span><span class="s">wooden</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">set_num_windows</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">builder</span> <span class="o">=</span> <span class="nc">ConcreteHouseBuilder</span><span class="p">()</span>
<span class="n">director</span> <span class="o">=</span> <span class="nc">HouseDirector</span><span class="p">(</span><span class="n">builder</span><span class="p">)</span>
<span class="n">house</span> <span class="o">=</span> <span class="n">director</span><span class="p">.</span><span class="nf">construct</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">house</span><span class="p">)</span>  <span class="c1"># Output: House with brick walls, wooden door, and 4 windows.
</span></code></pre></div></div> <h1 id="chapter-6-structural-design-patterns"><strong>Chapter 6: Structural Design Patterns</strong></h1> <p>Structural design patterns focus on how objects and classes are composed to form larger structures while keeping these structures flexible and efficient. These patterns streamline relationships between different entities, improving code readability and maintainability.</p> <h2 id="adapter-pattern"><strong>Adapter Pattern</strong></h2> <p>The Adapter pattern bridges the gap between incompatible interfaces by converting one interface into another that a client expects. It is particularly useful when integrating old code with new systems.</p> <h3 id="example-16"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">OldSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">specific_request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">Old system functionality</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">Target</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Adapter</span><span class="p">(</span><span class="n">Target</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">adaptee</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">adaptee</span> <span class="o">=</span> <span class="n">adaptee</span>

    <span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">adaptee</span><span class="p">.</span><span class="nf">specific_request</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">old_system</span> <span class="o">=</span> <span class="nc">OldSystem</span><span class="p">()</span>
<span class="n">adapter</span> <span class="o">=</span> <span class="nc">Adapter</span><span class="p">(</span><span class="n">old_system</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">adapter</span><span class="p">.</span><span class="nf">request</span><span class="p">())</span>  <span class="c1"># Output: Old system functionality
</span></code></pre></div></div> <h2 id="bridge-pattern"><strong>Bridge Pattern</strong></h2> <p>The Bridge pattern decouples an abstraction from its implementation, allowing them to vary independently. This pattern is particularly helpful in scenarios where a class has multiple dimensions of variability.</p> <h3 id="example-17"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Renderer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">render_circle</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">VectorRenderer</span><span class="p">(</span><span class="n">Renderer</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">render_circle</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Drawing a circle with radius </span><span class="si">{</span><span class="n">radius</span><span class="si">}</span><span class="s"> using vector rendering.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">RasterRenderer</span><span class="p">(</span><span class="n">Renderer</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">render_circle</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Drawing a circle with radius </span><span class="si">{</span><span class="n">radius</span><span class="si">}</span><span class="s"> using raster rendering.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Shape</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">renderer</span> <span class="o">=</span> <span class="n">renderer</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Circle</span><span class="p">(</span><span class="n">Shape</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">renderer</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">renderer</span><span class="p">.</span><span class="nf">render_circle</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">radius</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">vector_renderer</span> <span class="o">=</span> <span class="nc">VectorRenderer</span><span class="p">()</span>
<span class="n">raster_renderer</span> <span class="o">=</span> <span class="nc">RasterRenderer</span><span class="p">()</span>

<span class="n">circle</span> <span class="o">=</span> <span class="nc">Circle</span><span class="p">(</span><span class="n">vector_renderer</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="n">circle</span><span class="p">.</span><span class="nf">draw</span><span class="p">()</span>  <span class="c1"># Output: Drawing a circle with radius 5 using vector rendering.
</span>
<span class="n">circle</span><span class="p">.</span><span class="n">renderer</span> <span class="o">=</span> <span class="n">raster_renderer</span>
<span class="n">circle</span><span class="p">.</span><span class="nf">draw</span><span class="p">()</span>  <span class="c1"># Output: Drawing a circle with radius 5 using raster rendering.
</span></code></pre></div></div> <h2 id="composite-pattern"><strong>Composite Pattern</strong></h2> <p>The Composite pattern allows you to compose objects into tree structures to represent part-whole hierarchies. It enables clients to treat individual objects and compositions uniformly.</p> <h3 id="example-18"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Component</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">operation</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Leaf</span><span class="p">(</span><span class="n">Component</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">operation</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Leaf </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> operation.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Composite</span><span class="p">(</span><span class="n">Component</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">component</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">component</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">component</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">component</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">operation</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Composite operation begins.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
            <span class="n">child</span><span class="p">.</span><span class="nf">operation</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Composite operation ends.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">leaf1</span> <span class="o">=</span> <span class="nc">Leaf</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span>
<span class="n">leaf2</span> <span class="o">=</span> <span class="nc">Leaf</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">)</span>
<span class="n">composite</span> <span class="o">=</span> <span class="nc">Composite</span><span class="p">()</span>
<span class="n">composite</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">leaf1</span><span class="p">)</span>
<span class="n">composite</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">leaf2</span><span class="p">)</span>
<span class="n">composite</span><span class="p">.</span><span class="nf">operation</span><span class="p">()</span>
</code></pre></div></div> <h2 id="decorator-pattern"><strong>Decorator Pattern</strong></h2> <p>The Decorator pattern dynamically adds behavior or responsibilities to objects without modifying their code. This pattern is ideal for adhering to the Open/Closed Principle.</p> <h3 id="example-19"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Coffee</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">cost</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">5</span>

    <span class="k">def</span> <span class="nf">description</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">Plain coffee</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">MilkDecorator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">coffee</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">coffee</span> <span class="o">=</span> <span class="n">coffee</span>

    <span class="k">def</span> <span class="nf">cost</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">coffee</span><span class="p">.</span><span class="nf">cost</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span>

    <span class="k">def</span> <span class="nf">description</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">coffee</span><span class="p">.</span><span class="nf">description</span><span class="p">()</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, Milk</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">SugarDecorator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">coffee</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">coffee</span> <span class="o">=</span> <span class="n">coffee</span>

    <span class="k">def</span> <span class="nf">cost</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">coffee</span><span class="p">.</span><span class="nf">cost</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">description</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">coffee</span><span class="p">.</span><span class="nf">description</span><span class="p">()</span> <span class="o">+</span> <span class="sh">"</span><span class="s">, Sugar</span><span class="sh">"</span>

<span class="c1"># Example usage
</span><span class="n">coffee</span> <span class="o">=</span> <span class="nc">Coffee</span><span class="p">()</span>
<span class="n">milk_coffee</span> <span class="o">=</span> <span class="nc">MilkDecorator</span><span class="p">(</span><span class="n">coffee</span><span class="p">)</span>
<span class="n">sugar_milk_coffee</span> <span class="o">=</span> <span class="nc">SugarDecorator</span><span class="p">(</span><span class="n">milk_coffee</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">sugar_milk_coffee</span><span class="p">.</span><span class="nf">description</span><span class="p">())</span>  <span class="c1"># Output: Plain coffee, Milk, Sugar
</span><span class="nf">print</span><span class="p">(</span><span class="n">sugar_milk_coffee</span><span class="p">.</span><span class="nf">cost</span><span class="p">())</span>  <span class="c1"># Output: 8
</span></code></pre></div></div> <h2 id="facade-pattern"><strong>Facade Pattern</strong></h2> <p>The Facade pattern provides a simplified interface to a complex subsystem, making it easier for clients to interact with the system.</p> <h3 id="example-20"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SubsystemA</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">operation_a</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Subsystem A operation.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SubsystemB</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">operation_b</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Subsystem B operation.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Facade</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">subsystem_a</span> <span class="o">=</span> <span class="nc">SubsystemA</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">subsystem_b</span> <span class="o">=</span> <span class="nc">SubsystemB</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">operation</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Facade simplifies subsystem operations.</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">subsystem_a</span><span class="p">.</span><span class="nf">operation_a</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">subsystem_b</span><span class="p">.</span><span class="nf">operation_b</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">facade</span> <span class="o">=</span> <span class="nc">Facade</span><span class="p">()</span>
<span class="n">facade</span><span class="p">.</span><span class="nf">operation</span><span class="p">()</span>
</code></pre></div></div> <h2 id="flyweight-pattern"><strong>Flyweight Pattern</strong></h2> <p>The Flyweight pattern reduces memory usage by sharing common parts of object states rather than creating new objects for each state.</p> <h3 id="example-21"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Flyweight</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared_state</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">shared_state</span> <span class="o">=</span> <span class="n">shared_state</span>

    <span class="k">def</span> <span class="nf">operation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">unique_state</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Shared: </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">shared_state</span><span class="si">}</span><span class="s">, Unique: </span><span class="si">{</span><span class="n">unique_state</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">FlyweightFactory</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">flyweights</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">get_flyweight</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared_state</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">shared_state</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">flyweights</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">flyweights</span><span class="p">[</span><span class="n">shared_state</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Flyweight</span><span class="p">(</span><span class="n">shared_state</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">flyweights</span><span class="p">[</span><span class="n">shared_state</span><span class="p">]</span>

<span class="c1"># Example usage
</span><span class="n">factory</span> <span class="o">=</span> <span class="nc">FlyweightFactory</span><span class="p">()</span>
<span class="n">flyweight1</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">get_flyweight</span><span class="p">(</span><span class="sh">"</span><span class="s">State1</span><span class="sh">"</span><span class="p">)</span>
<span class="n">flyweight2</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nf">get_flyweight</span><span class="p">(</span><span class="sh">"</span><span class="s">State1</span><span class="sh">"</span><span class="p">)</span>

<span class="n">flyweight1</span><span class="p">.</span><span class="nf">operation</span><span class="p">(</span><span class="sh">"</span><span class="s">Unique1</span><span class="sh">"</span><span class="p">)</span>
<span class="n">flyweight2</span><span class="p">.</span><span class="nf">operation</span><span class="p">(</span><span class="sh">"</span><span class="s">Unique2</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">flyweight1</span> <span class="ow">is</span> <span class="n">flyweight2</span><span class="p">)</span>  <span class="c1"># Output: True
</span></code></pre></div></div> <h2 id="proxy-pattern"><strong>Proxy Pattern</strong></h2> <p>The Proxy pattern provides a surrogate or placeholder object to control access to another object. It is useful for adding security or caching functionality.</p> <h3 id="example-22"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RealSubject</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RealSubject: Handling request.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Proxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">real_subject</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">real_subject</span> <span class="o">=</span> <span class="n">real_subject</span>

    <span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Proxy: Checking access before forwarding the request.</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">real_subject</span><span class="p">.</span><span class="nf">request</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">real_subject</span> <span class="o">=</span> <span class="nc">RealSubject</span><span class="p">()</span>
<span class="n">proxy</span> <span class="o">=</span> <span class="nc">Proxy</span><span class="p">(</span><span class="n">real_subject</span><span class="p">)</span>
<span class="n">proxy</span><span class="p">.</span><span class="nf">request</span><span class="p">()</span>
</code></pre></div></div> <h1 id="chapter-7-behavioral-design-patterns"><strong>Chapter 7: Behavioral Design Patterns</strong></h1> <p>Behavioral design patterns focus on communication between objects. They help define how objects interact, delegate responsibilities, and ensure flexibility in executing complex behaviors.</p> <h2 id="chain-of-responsibility-pattern"><strong>Chain of Responsibility Pattern</strong></h2> <p>The Chain of Responsibility pattern decouples the sender and receiver of a request by passing the request along a chain of handlers. Each handler decides whether to process the request or pass it to the next handler.</p> <h3 id="example-23"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Handler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">successor</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">successor</span> <span class="o">=</span> <span class="n">successor</span>

    <span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">successor</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">successor</span><span class="p">.</span><span class="nf">handle_request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConcreteHandlerA</span><span class="p">(</span><span class="n">Handler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">request</span> <span class="o">==</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Handler A processed the request.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="n">successor</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">successor</span><span class="p">.</span><span class="nf">handle_request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConcreteHandlerB</span><span class="p">(</span><span class="n">Handler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">request</span> <span class="o">==</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Handler B processed the request.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="n">successor</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">successor</span><span class="p">.</span><span class="nf">handle_request</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">handler_chain</span> <span class="o">=</span> <span class="nc">ConcreteHandlerA</span><span class="p">(</span><span class="nc">ConcreteHandlerB</span><span class="p">())</span>
<span class="n">handler_chain</span><span class="p">.</span><span class="nf">handle_request</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># Output: Handler A processed the request.
</span><span class="n">handler_chain</span><span class="p">.</span><span class="nf">handle_request</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># Output: Handler B processed the request.
</span></code></pre></div></div> <h2 id="command-pattern"><strong>Command Pattern</strong></h2> <p>The Command pattern encapsulates a request as an object, allowing clients to parameterize objects with different requests, delay execution, or queue requests.</p> <h3 id="example-24"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Command</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Light</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">turn_on</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Light is ON</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">turn_off</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Light is OFF</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TurnOnCommand</span><span class="p">(</span><span class="n">Command</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">light</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">light</span> <span class="o">=</span> <span class="n">light</span>

    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">light</span><span class="p">.</span><span class="nf">turn_on</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">TurnOffCommand</span><span class="p">(</span><span class="n">Command</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">light</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">light</span> <span class="o">=</span> <span class="n">light</span>

    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">light</span><span class="p">.</span><span class="nf">turn_off</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">RemoteControl</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">command</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set_command</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">command</span> <span class="o">=</span> <span class="n">command</span>

    <span class="k">def</span> <span class="nf">press_button</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">command</span><span class="p">.</span><span class="nf">execute</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">light</span> <span class="o">=</span> <span class="nc">Light</span><span class="p">()</span>
<span class="n">turn_on</span> <span class="o">=</span> <span class="nc">TurnOnCommand</span><span class="p">(</span><span class="n">light</span><span class="p">)</span>
<span class="n">turn_off</span> <span class="o">=</span> <span class="nc">TurnOffCommand</span><span class="p">(</span><span class="n">light</span><span class="p">)</span>

<span class="n">remote</span> <span class="o">=</span> <span class="nc">RemoteControl</span><span class="p">()</span>
<span class="n">remote</span><span class="p">.</span><span class="nf">set_command</span><span class="p">(</span><span class="n">turn_on</span><span class="p">)</span>
<span class="n">remote</span><span class="p">.</span><span class="nf">press_button</span><span class="p">()</span>  <span class="c1"># Output: Light is ON
</span><span class="n">remote</span><span class="p">.</span><span class="nf">set_command</span><span class="p">(</span><span class="n">turn_off</span><span class="p">)</span>
<span class="n">remote</span><span class="p">.</span><span class="nf">press_button</span><span class="p">()</span>  <span class="c1"># Output: Light is OFF
</span></code></pre></div></div> <h2 id="observer-pattern"><strong>Observer Pattern</strong></h2> <p>The Observer pattern establishes a one-to-many dependency between objects so that when one object changes state, all its dependents are notified.</p> <h3 id="example-25"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Subject</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">observers</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">attach</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">observers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">detach</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">observers</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">observer</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">observers</span><span class="p">:</span>
            <span class="n">observer</span><span class="p">.</span><span class="nf">update</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">ConcreteObserver</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> received an update.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">subject</span> <span class="o">=</span> <span class="nc">Subject</span><span class="p">()</span>
<span class="n">observer1</span> <span class="o">=</span> <span class="nc">ConcreteObserver</span><span class="p">(</span><span class="sh">"</span><span class="s">Observer 1</span><span class="sh">"</span><span class="p">)</span>
<span class="n">observer2</span> <span class="o">=</span> <span class="nc">ConcreteObserver</span><span class="p">(</span><span class="sh">"</span><span class="s">Observer 2</span><span class="sh">"</span><span class="p">)</span>

<span class="n">subject</span><span class="p">.</span><span class="nf">attach</span><span class="p">(</span><span class="n">observer1</span><span class="p">)</span>
<span class="n">subject</span><span class="p">.</span><span class="nf">attach</span><span class="p">(</span><span class="n">observer2</span><span class="p">)</span>

<span class="n">subject</span><span class="p">.</span><span class="nf">notify</span><span class="p">()</span>
<span class="c1"># Output:
# Observer 1 received an update.
# Observer 2 received an update.
</span></code></pre></div></div> <h2 id="strategy-pattern"><strong>Strategy Pattern</strong></h2> <p>The Strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. This pattern enables the algorithm to vary independently from the clients that use it.</p> <h3 id="example-26"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Strategy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ConcreteStrategyA</span><span class="p">(</span><span class="n">Strategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Executing Strategy A</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConcreteStrategyB</span><span class="p">(</span><span class="n">Strategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Executing Strategy B</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Context</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">strategy</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">strategy</span>

    <span class="k">def</span> <span class="nf">set_strategy</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">strategy</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">strategy</span>

    <span class="k">def</span> <span class="nf">execute_strategy</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">strategy</span><span class="p">.</span><span class="nf">execute</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">context</span> <span class="o">=</span> <span class="nc">Context</span><span class="p">(</span><span class="nc">ConcreteStrategyA</span><span class="p">())</span>
<span class="n">context</span><span class="p">.</span><span class="nf">execute_strategy</span><span class="p">()</span>  <span class="c1"># Output: Executing Strategy A
</span>
<span class="n">context</span><span class="p">.</span><span class="nf">set_strategy</span><span class="p">(</span><span class="nc">ConcreteStrategyB</span><span class="p">())</span>
<span class="n">context</span><span class="p">.</span><span class="nf">execute_strategy</span><span class="p">()</span>  <span class="c1"># Output: Executing Strategy B
</span></code></pre></div></div> <h2 id="state-pattern"><strong>State Pattern</strong></h2> <p>The State pattern allows an object to alter its behavior when its internal state changes. The object appears to change its class.</p> <h3 id="example-27"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">State</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ConcreteStateA</span><span class="p">(</span><span class="n">State</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Handling State A</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConcreteStateB</span><span class="p">(</span><span class="n">State</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Handling State B</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Context</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">set_state</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="nf">handle</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="n">state_a</span> <span class="o">=</span> <span class="nc">ConcreteStateA</span><span class="p">()</span>
<span class="n">state_b</span> <span class="o">=</span> <span class="nc">ConcreteStateB</span><span class="p">()</span>

<span class="n">context</span> <span class="o">=</span> <span class="nc">Context</span><span class="p">(</span><span class="n">state_a</span><span class="p">)</span>
<span class="n">context</span><span class="p">.</span><span class="nf">request</span><span class="p">()</span>  <span class="c1"># Output: Handling State A
</span>
<span class="n">context</span><span class="p">.</span><span class="nf">set_state</span><span class="p">(</span><span class="n">state_b</span><span class="p">)</span>
<span class="n">context</span><span class="p">.</span><span class="nf">request</span><span class="p">()</span>  <span class="c1"># Output: Handling State B
</span></code></pre></div></div> <h2 id="interpreter-pattern"><strong>Interpreter Pattern</strong></h2> <p>The Interpreter pattern defines a grammar and provides a way to interpret sentences in that grammar. This is often used for parsing or evaluating expressions.</p> <h3 id="example-28"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Expression</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">interpret</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Number</span><span class="p">(</span><span class="n">Expression</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">interpret</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">value</span>

<span class="k">class</span> <span class="nc">Add</span><span class="p">(</span><span class="n">Expression</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>

    <span class="k">def</span> <span class="nf">interpret</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="nf">interpret</span><span class="p">(</span><span class="n">context</span><span class="p">)</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="nf">interpret</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Subtract</span><span class="p">(</span><span class="n">Expression</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>

    <span class="k">def</span> <span class="nf">interpret</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="nf">interpret</span><span class="p">(</span><span class="n">context</span><span class="p">)</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="nf">interpret</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">context</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">expression</span> <span class="o">=</span> <span class="nc">Add</span><span class="p">(</span><span class="nc">Number</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="nc">Subtract</span><span class="p">(</span><span class="nc">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="nc">Number</span><span class="p">(</span><span class="mi">3</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">expression</span><span class="p">.</span><span class="nf">interpret</span><span class="p">(</span><span class="n">context</span><span class="p">))</span>  <span class="c1"># Output: 12
</span></code></pre></div></div> <h2 id="iterator-pattern"><strong>Iterator Pattern</strong></h2> <p>The Iterator pattern provides a way to access elements of a collection sequentially without exposing its underlying representation.</p> <h3 id="example-29"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Iterator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">collection</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">collection</span> <span class="o">=</span> <span class="n">collection</span>
        <span class="n">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">has_next</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">index</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">collection</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">has_next</span><span class="p">():</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">collection</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">index</span><span class="p">]</span>
            <span class="n">self</span><span class="p">.</span><span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="n">value</span>
        <span class="k">raise</span> <span class="nb">StopIteration</span>

<span class="c1"># Example usage
</span><span class="n">collection</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">iterator</span> <span class="o">=</span> <span class="nc">Iterator</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>

<span class="k">while</span> <span class="n">iterator</span><span class="p">.</span><span class="nf">has_next</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">iterator</span><span class="p">.</span><span class="nf">next</span><span class="p">())</span>
</code></pre></div></div> <h2 id="mediator-pattern"><strong>Mediator Pattern</strong></h2> <p>The Mediator pattern centralizes complex communication between objects, promoting loose coupling.</p> <h3 id="example-30"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Mediator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">sender</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ConcreteMediator</span><span class="p">(</span><span class="n">Mediator</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">component1</span><span class="p">,</span> <span class="n">component2</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">component1</span> <span class="o">=</span> <span class="n">component1</span>
        <span class="n">self</span><span class="p">.</span><span class="n">component1</span><span class="p">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="n">self</span>
        <span class="n">self</span><span class="p">.</span><span class="n">component2</span> <span class="o">=</span> <span class="n">component2</span>
        <span class="n">self</span><span class="p">.</span><span class="n">component2</span><span class="p">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="n">self</span>

    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">sender</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span> <span class="o">==</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Mediator reacts to event A and triggers component2.</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">component2</span><span class="p">.</span><span class="nf">do_c</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">event</span> <span class="o">==</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Mediator reacts to event B and triggers component1.</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">component1</span><span class="p">.</span><span class="nf">do_a</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">Component</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">class</span> <span class="nc">Component1</span><span class="p">(</span><span class="n">Component</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">do_a</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Component1 does A.</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mediator</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Component2</span><span class="p">(</span><span class="n">Component</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">do_c</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Component2 does C.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">component1</span> <span class="o">=</span> <span class="nc">Component1</span><span class="p">()</span>
<span class="n">component2</span> <span class="o">=</span> <span class="nc">Component2</span><span class="p">()</span>
<span class="n">mediator</span> <span class="o">=</span> <span class="nc">ConcreteMediator</span><span class="p">(</span><span class="n">component1</span><span class="p">,</span> <span class="n">component2</span><span class="p">)</span>
<span class="n">component1</span><span class="p">.</span><span class="nf">do_a</span><span class="p">()</span>
</code></pre></div></div> <h2 id="memento-pattern"><strong>Memento Pattern</strong></h2> <p>The Memento pattern captures and restores an object’s internal state without violating encapsulation.</p> <h3 id="example-31"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Memento</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">state</span>

<span class="k">class</span> <span class="nc">Originator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set_state</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">save_to_memento</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">Memento</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">state</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">restore_from_memento</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">memento</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">memento</span><span class="p">.</span><span class="n">state</span>

<span class="k">class</span> <span class="nc">Caretaker</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mementos</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add_memento</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">memento</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mementos</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">memento</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_memento</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">mementos</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>

<span class="c1"># Example usage
</span><span class="n">originator</span> <span class="o">=</span> <span class="nc">Originator</span><span class="p">()</span>
<span class="n">caretaker</span> <span class="o">=</span> <span class="nc">Caretaker</span><span class="p">()</span>

<span class="n">originator</span><span class="p">.</span><span class="nf">set_state</span><span class="p">(</span><span class="sh">"</span><span class="s">State1</span><span class="sh">"</span><span class="p">)</span>
<span class="n">caretaker</span><span class="p">.</span><span class="nf">add_memento</span><span class="p">(</span><span class="n">originator</span><span class="p">.</span><span class="nf">save_to_memento</span><span class="p">())</span>

<span class="n">originator</span><span class="p">.</span><span class="nf">set_state</span><span class="p">(</span><span class="sh">"</span><span class="s">State2</span><span class="sh">"</span><span class="p">)</span>
<span class="n">caretaker</span><span class="p">.</span><span class="nf">add_memento</span><span class="p">(</span><span class="n">originator</span><span class="p">.</span><span class="nf">save_to_memento</span><span class="p">())</span>

<span class="n">originator</span><span class="p">.</span><span class="nf">restore_from_memento</span><span class="p">(</span><span class="n">caretaker</span><span class="p">.</span><span class="nf">get_memento</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">originator</span><span class="p">.</span><span class="n">state</span><span class="p">)</span>  <span class="c1"># Output: State1
</span></code></pre></div></div> <h2 id="template-method-pattern"><strong>Template Method Pattern</strong></h2> <p>The Template Method pattern defines the skeleton of an algorithm in a base class while allowing subclasses to redefine specific steps of the algorithm.</p> <h3 id="example-32"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AbstractClass</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">template_method</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">step_one</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">step_two</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">step_three</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">step_one</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">AbstractClass: Step One</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">step_two</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">step_three</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">AbstractClass: Step Three</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConcreteClassA</span><span class="p">(</span><span class="n">AbstractClass</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">step_two</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ConcreteClassA: Step Two</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConcreteClassB</span><span class="p">(</span><span class="n">AbstractClass</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">step_two</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ConcreteClassB: Step Two</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">a</span> <span class="o">=</span> <span class="nc">ConcreteClassA</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="nc">ConcreteClassB</span><span class="p">()</span>
<span class="n">a</span><span class="p">.</span><span class="nf">template_method</span><span class="p">()</span>
<span class="c1"># Output:
# AbstractClass: Step One
# ConcreteClassA: Step Two
# AbstractClass: Step Three
</span>
<span class="n">b</span><span class="p">.</span><span class="nf">template_method</span><span class="p">()</span>
<span class="c1"># Output:
# AbstractClass: Step One
# ConcreteClassB: Step Two
# AbstractClass: Step Three
</span></code></pre></div></div> <h2 id="visitor-pattern"><strong>Visitor Pattern</strong></h2> <p>The Visitor pattern allows you to add new operations to a class hierarchy without modifying the classes.</p> <h3 id="example-33"><strong>Example:</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Visitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">visit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">element</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ConcreteVisitor</span><span class="p">(</span><span class="n">Visitor</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">visit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">element</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Visiting </span><span class="si">{</span><span class="n">element</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Element</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">visitor</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ConcreteElementA</span><span class="p">(</span><span class="n">Element</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Element A</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">visitor</span><span class="p">):</span>
        <span class="n">visitor</span><span class="p">.</span><span class="nf">visit</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ConcreteElementB</span><span class="p">(</span><span class="n">Element</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Element B</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">visitor</span><span class="p">):</span>
        <span class="n">visitor</span><span class="p">.</span><span class="nf">visit</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>

<span class="c1"># Example usage
</span><span class="n">elements</span> <span class="o">=</span> <span class="p">[</span><span class="nc">ConcreteElementA</span><span class="p">(),</span> <span class="nc">ConcreteElementB</span><span class="p">()]</span>
<span class="n">visitor</span> <span class="o">=</span> <span class="nc">ConcreteVisitor</span><span class="p">()</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">elements</span><span class="p">:</span>
    <span class="n">element</span><span class="p">.</span><span class="nf">accept</span><span class="p">(</span><span class="n">visitor</span><span class="p">)</span>
<span class="c1"># Output:
# Visiting Element A
# Visiting Element B
</span></code></pre></div></div>]]></content><author><name></name></author><category term="system-design"/><category term="lld"/><category term="low-level-design"/><summary type="html"><![CDATA[Explores fundamental principles, best practices, and patterns for crafting efficient, scalable, and maintainable system architectures.]]></summary></entry><entry><title type="html">MLOps: Introduction</title><link href="https://raghuhemadri.github.io/blog/2025/mlops-intro/" rel="alternate" type="text/html" title="MLOps: Introduction"/><published>2025-01-23T09:00:00+00:00</published><updated>2025-01-23T09:00:00+00:00</updated><id>https://raghuhemadri.github.io/blog/2025/mlops-intro</id><content type="html" xml:base="https://raghuhemadri.github.io/blog/2025/mlops-intro/"><![CDATA[<h1 id="from-prototype-to-production-building-reliable-machine-learning-systems"><strong>From Prototype to Production: Building Reliable Machine Learning Systems</strong></h1> <h2 id="introduction"><strong>Introduction</strong></h2> <p>The transition from a prototype machine learning (ML) system to a full-scale production deployment is one of the most critical—yet challenging—phases in machine learning operations (MLOps). While prototypes focus on proof-of-concept development, production systems must handle real-world complexities, including scalability, data integrity, fairness, and business objectives.</p> <p>In this article, we’ll explore the key differences between ML prototypes and production systems, examine scaling challenges, and share best practices for building robust machine learning pipelines.</p> <hr/> <h2 id="prototype-vs-production-ml-systems"><strong>Prototype vs. Production ML Systems</strong></h2> <p>Before deploying ML models to production, it’s crucial to understand the fundamental differences between prototypes and production-ready systems.</p> <table> <thead> <tr> <th>Aspect</th> <th>Prototype ML System</th> <th>Production ML System</th> </tr> </thead> <tbody> <tr> <td><strong>Scale</strong></td> <td>Small, experimental</td> <td>Large-scale, serves many users</td> </tr> <tr> <td><strong>Data</strong></td> <td>Readily available toy datasets</td> <td>Requires collection, cleaning, and continuous monitoring</td> </tr> <tr> <td><strong>Privacy &amp; Fairness</strong></td> <td>Less emphasized</td> <td>Critical for ethical AI</td> </tr> <tr> <td><strong>System Design</strong></td> <td>Typically a monolithic model</td> <td>Often composed of multiple models interacting</td> </tr> <tr> <td><strong>Objective</strong></td> <td>Optimizing for ML metric (e.g., accuracy)</td> <td>Needs to drive business KPIs and outperform current solutions</td> </tr> <tr> <td><strong>Automation</strong></td> <td>Minimal automation</td> <td>Requires an automated pipeline for model iteration</td> </tr> </tbody> </table> <h3 id="key-takeaways"><strong>Key Takeaways</strong></h3> <ul> <li>Moving from a prototype to production requires <strong>robust data pipelines</strong>, <strong>continuous monitoring</strong>, and <strong>automation</strong>.</li> <li>Business goals must drive the success of a production ML system, not just model accuracy.</li> </ul> <hr/> <h2 id="challenges-in-productionizing-ml-models"><strong>Challenges in productionizing ML Models</strong></h2> <p>Scaling ML models beyond prototypes introduces several key challenges:</p> <h3 id="1-data-management"><strong>1. Data Management</strong></h3> <ul> <li><strong>Data collection</strong>: Unlike controlled experiments, real-world data is noisy and often incomplete.</li> <li><strong>Data validation</strong>: Poor-quality data can degrade model performance.</li> <li><strong>Dynamic nature</strong>: Unlike static datasets in prototypes, real-world data distributions shift over time, requiring continuous retraining.</li> </ul> <h3 id="2-technical-debt-in-ml-systems"><strong>2. Technical Debt in ML Systems</strong></h3> <p>A well-known 2015 NeurIPS paper, <em>Hidden Technical Debt in Machine Learning Systems</em>, highlights the extensive technical debt accumulated in ML systems. The model code itself represents only a small portion of the system, with most resources devoted to <strong>data collection, verification, feature extraction, configuration management, monitoring, and infrastructure</strong>.</p> <h3 id="3-model-deployment--monitoring"><strong>3. Model Deployment &amp; Monitoring</strong></h3> <ul> <li><strong>Scalability concerns</strong>: Serving models efficiently at scale requires robust infrastructure for model inference.</li> <li><strong>Model degradation</strong>: Continuous performance monitoring is needed to detect drift.</li> <li><strong>Explainability &amp; fairness</strong>: Regulatory and ethical concerns require that models remain interpretable and unbiased.</li> </ul> <hr/> <h2 id="building-reliable-machine-learning-pipelines"><strong>Building Reliable Machine Learning Pipelines</strong></h2> <p>A well-structured machine learning pipeline is essential for productionizing ML models. Key properties include:</p> <h3 id="1-automation"><strong>1. Automation</strong></h3> <p>A basic (Level 0) ML workflow involves:</p> <ol> <li>Manual data collection and preparation</li> <li>Model training and selection</li> <li>Model evaluation and deployment</li> </ol> <p>However, manual interventions are costly. A mature ML pipeline should incorporate:</p> <ul> <li><strong>Automated data validation</strong></li> <li><strong>Continuous model training and retraining</strong></li> <li><strong>Automated monitoring and deployment</strong></li> </ul> <h3 id="2-key-qualities-of-an-ml-pipeline"><strong>2. Key Qualities of an ML Pipeline</strong></h3> <p>Regardless of the application, a high-quality ML pipeline should ensure:</p> <ul> <li><strong>Velocity</strong>: Fast iteration and experimentation on data and models.</li> <li><strong>Validation</strong>: Early detection of issues before they become expensive to fix.</li> <li><strong>Versioning</strong>: Ability to track and revert changes in data, model, and configurations.</li> </ul> <h3 id="3-application-specific-considerations"><strong>3. Application-Specific Considerations</strong></h3> <p>The design of an ML pipeline depends on several key factors:</p> <ul> <li><strong>Data availability</strong>: How much and what kind of data is available?</li> <li><strong>User needs</strong>: Who will use the system, and how?</li> <li><strong>Scale requirements</strong>: How many concurrent users/predictions need to be served?</li> <li><strong>Privacy &amp; fairness</strong>: How critical are interpretability and bias mitigation?</li> <li><strong>Compute resources</strong>: What hardware infrastructure is available?</li> </ul> <h3 id="4-case-study-movie-recommendation-systems"><strong>4. Case Study: Movie Recommendation Systems</strong></h3> <p>Consider two movie recommendation engines:</p> <ul> <li>A <strong>physical mail recommendation system</strong> updates recommendations <strong>monthly</strong> based on shopping history.</li> <li>A <strong>streaming platform’s recommendation system</strong> updates recommendations <strong>in real time</strong> based on watch history.</li> </ul> <p>Each requires different ML system designs:</p> <table> <thead> <tr> <th>Feature</th> <th>Physical Mail</th> <th>Streaming Service</th> </tr> </thead> <tbody> <tr> <td><strong>Update Frequency</strong></td> <td>Monthly batch updates</td> <td>Real-time personalization</td> </tr> <tr> <td><strong>Data Type</strong></td> <td>Shopping history</td> <td>Watch and browse history</td> </tr> <tr> <td><strong>Evaluation Metric</strong></td> <td>Purchases over time</td> <td>Click-through rate (CTR)</td> </tr> <tr> <td><strong>Privacy Consideration</strong></td> <td>Recommendations visible to all</td> <td>Personalized for the user</td> </tr> </tbody> </table> <hr/> <h2 id="conclusion"><strong>Conclusion</strong></h2> <p>Moving from a prototype ML system to a full production deployment requires thoughtful design, automation, and monitoring. A well-engineered ML pipeline:</p> <ul> <li>Ensures <strong>scalability, reliability, and maintainability</strong>.</li> <li>Reduces <strong>technical debt</strong>.</li> <li>Aligns with <strong>business objectives</strong> beyond just optimizing ML metrics.</li> </ul> <p>As ML systems continue to evolve, adopting <strong>best practices in MLOps</strong> is essential for building <strong>robust, efficient, and ethical AI solutions</strong>.</p> <hr/> <h1 id="from-zero-insight-to-predicting-service-time-an-mlops-case-study"><strong>From Zero Insight to Predicting Service Time: An MLOps Case Study</strong></h1> <h2 id="introduction-1"><strong>Introduction</strong></h2> <p>In modern logistics and e-commerce, accurately predicting <strong>service time</strong>—the time spent delivering an order to a customer—is crucial for operational efficiency. Poor estimates lead to delivery delays, increased costs, and driver dissatisfaction.</p> <p>Oda, an online grocery delivery service, initially relied on <strong>static business rules</strong> for service time estimates. This inflexible method lacked precision, prompting Oda to adopt a <strong>machine learning (ML)-based approach</strong> for dynamic predictions.</p> <p>This blog details our <strong>end-to-end MLOps journey</strong>, from <strong>data collection and model building to deployment and real-world testing</strong>. We explore key challenges, ML’s impact, and the vital role of <strong>MLOps best practices</strong> in maintaining robust predictive models.</p> <hr/> <h2 id="1-why-predicting-service-time-matters"><strong>1. Why Predicting Service Time Matters</strong></h2> <h3 id="what-is-service-time"><strong>What is Service Time?</strong></h3> <p>Service time refers to <strong>the time a delivery driver spends at a customer’s location</strong> before moving to the next stop. It includes:</p> <ul> <li><strong>Finding a parking spot</strong></li> <li><strong>Restacking the delivery vehicle</strong></li> <li><strong>Scanning the order</strong></li> <li><strong>Carrying groceries to the customer’s door</strong></li> <li><strong>Potential interactions with the customer</strong></li> </ul> <h3 id="why-service-time-prediction-is-critical"><strong>Why Service Time Prediction is Critical</strong></h3> <p>Service time comprises <strong>50% of a driver’s total workday</strong>, making it a <strong>key component of delivery efficiency</strong>. Inaccurate estimates lead to:</p> <ul> <li><strong>Delayed deliveries</strong>, negatively impacting customer satisfaction.</li> <li><strong>Driver stress</strong>, leading to higher turnover rates.</li> <li><strong>Inefficient route planning</strong>, increasing fuel consumption and costs.</li> </ul> <p>Initially, Oda used a <strong>fixed 7-minute service time per delivery</strong> with <strong>manual adjustments</strong> based on experience. This rigid approach proved inaccurate and led to frequent miscalculations.</p> <hr/> <h2 id="2-data-collection-the-role-of-geofencing"><strong>2. Data Collection: The Role of Geofencing</strong></h2> <h3 id="the-challenge-lack-of-reliable-data"><strong>The Challenge: Lack of Reliable Data</strong></h3> <p>The primary hurdle in building an ML model was <strong>data unavailability</strong>. Without <strong>accurate historical service time data</strong>, creating a robust predictive model was impossible.</p> <h3 id="exploring-data-collection-methods"><strong>Exploring Data Collection Methods</strong></h3> <p>We explored several options to measure actual service time:</p> <ul> <li><strong>Continuous GPS tracking</strong><em>Pros</em>: Highly accurate<em>Cons</em>: Privacy concerns, high data storage cost</li> <li><strong>Manual timestamp logging</strong><em>Pros</em>: Accurate, driver-controlled<em>Cons</em>: Requires additional driver effort</li> <li><strong>Google Maps timestamps</strong><em>Pros</em>: Easily accessible<em>Cons</em>: Inaccurate due to routing discrepancies</li> <li><strong>Geofencing</strong><em>Pros</em>: Automatic, minimal driver interference, privacy-friendly<em>Cons</em>: Requires precise location data, edge cases need handling</li> </ul> <h3 id="choosing-geofencing-for-data-collection"><strong>Choosing Geofencing for Data Collection</strong></h3> <p>We implemented <strong>geofencing</strong>, creating <strong>virtual boundaries around customer locations</strong>. The system <strong>logs timestamps when drivers enter and exit these zones</strong>, providing <strong>automated service time measurements</strong>.</p> <h3 id="implementation-steps"><strong>Implementation Steps</strong></h3> <ol> <li><strong>Pilot Testing</strong> <ul> <li>Installed geofencing on driver devices.</li> <li>Compared geofence timestamps with manually recorded service times.</li> <li>Ensured privacy compliance with data retention policies.</li> </ul> </li> <li><strong>Handling Edge Cases</strong> <ul> <li>Preventing false triggers when drivers pass geofences without stopping.</li> <li>Managing overlapping geofences for nearby customers.</li> <li>Filtering out erroneous timestamps from GPS fluctuations.</li> </ul> </li> </ol> <p>Geofencing <strong>eliminated manual logging</strong>, <strong>improved accuracy</strong>, and <strong>enabled large-scale data collection</strong>.</p> <hr/> <h2 id="3-building-the-machine-learning-model"><strong>3. Building the Machine Learning Model</strong></h2> <p>After gathering <strong>two years of historical service time data</strong> through geofencing, we transitioned from a <strong>rule-based system to an ML model</strong>.</p> <h3 id="feature-engineering-identifying-key-predictors"><strong>Feature Engineering: Identifying Key Predictors</strong></h3> <p>We identified these crucial features affecting service time:</p> <ul> <li><strong>Order size</strong> (weight, number of items, number of boxes)</li> <li><strong>Location factors</strong> (urban vs. rural, parking difficulty)</li> <li><strong>Customer history</strong> (past service times, building floor, elevator presence)</li> <li><strong>Time-based variables</strong> (day of week, time of day)</li> </ul> <h3 id="choosing-the-ml-model"><strong>Choosing the ML Model</strong></h3> <p>After testing various models, we selected <strong>LightGBM</strong>, a gradient boosting model, for its:</p> <ul> <li><strong>Speed</strong>: Faster training and inference than deep learning models.</li> <li><strong>Interpretability</strong>: Clear feature importance analysis for business insights.</li> <li><strong>Robustness</strong>: Excellent handling of <strong>nonlinear relationships</strong>.</li> </ul> <h3 id="hyperparameter-tuning"><strong>Hyperparameter Tuning</strong></h3> <p>We optimized model performance using <strong>Bayesian optimization with Optuna</strong> to tune:</p> <ul> <li>Learning rate selection</li> <li>Decision tree depth</li> <li>Feature weight adjustments</li> </ul> <hr/> <h2 id="4-model-evaluation-and-real-world-testing"><strong>4. Model Evaluation and Real-World Testing</strong></h2> <p>After training and validation, we <strong>deployed the model</strong> in Norway’s <strong>Sandvika region</strong> as our test area.</p> <h3 id="key-metrics-for-model-evaluation"><strong>Key Metrics for Model Evaluation</strong></h3> <p>We compared our ML model against:</p> <ol> <li><strong>Business Logic Model</strong> (previous rule-based approach)</li> <li><strong>Naïve Model</strong> (using historical average service time)</li> </ol> <p>Using <strong>Mean Absolute Error (MAE)</strong> as our primary metric.</p> <h3 id="results-ml-model-vs-business-logic"><strong>Results: ML Model vs. Business Logic</strong></h3> <p>📌 <strong>ML Model Outperformed the Business Logic Model</strong></p> <ul> <li><strong>Reduced MAE by ~30 seconds</strong>.</li> <li><strong>Predictions showed greater stability and adaptability</strong> across conditions.</li> </ul> <p>📌 <strong>Challenges &amp; Observations</strong></p> <ul> <li><strong>Minimal impact on overall route precision</strong> <ul> <li>Individual time estimates improved, but total route completion time stayed similar.</li> <li>Individual errors often <strong>balanced out across multiple stops</strong>.</li> </ul> </li> <li><strong>Performance fluctuations during peak periods</strong> <ul> <li>Holiday seasons, especially Christmas, showed decreased accuracy due to <strong>unusual shopping patterns</strong>.</li> </ul> </li> </ul> <p>Despite these challenges, our model <strong>clearly outperformed the rule-based approach</strong>.</p> <hr/> <h2 id="5-mlops-challenges-and-future-improvements"><strong>5. MLOps Challenges and Future Improvements</strong></h2> <h3 id="mlops-challenges-encountered"><strong>MLOps Challenges Encountered</strong></h3> <ol> <li><strong>Data Drift</strong>: Customer behavior changes and external factors (weather, holidays) affected predictions.</li> <li><strong>Scalability</strong>: New delivery regions required continuous model fine-tuning.</li> <li><strong>Model Monitoring</strong>: Performance degradation needed constant tracking.</li> </ol> <h3 id="planned-future-enhancements"><strong>Planned Future Enhancements</strong></h3> <p>🔹 <strong>Improving Data Quality</strong></p> <ul> <li>Implementing <strong>real-time anomaly detection</strong> to catch <strong>erroneous service time records</strong>.</li> </ul> <p>🔹 <strong>Enhancing Model Adaptability</strong></p> <ul> <li>Introducing <strong>adaptive learning</strong> for seasonal variations.</li> <li>Incorporating <strong>real-time weather data</strong> to account for weather-related delays.</li> </ul> <p>🔹 <strong>Exploration vs. Exploitation Trade-off</strong></p> <ul> <li>Adding an <strong>exploratory component</strong> for <strong>dynamic adaptation to new scenarios</strong>.</li> </ul> <hr/> <h2 id="6-key-takeaways-the-role-of-mlops"><strong>6. Key Takeaways: The Role of MLOps</strong></h2> <h3 id="why-mlops-is-critical-in-real-world-ml-applications"><strong>Why MLOps is Critical in Real-World ML Applications</strong></h3> <ol> <li><strong>Automated Data Pipelines</strong>: Reliable geofencing ensures consistent, accurate data collection.</li> <li><strong>Scalable Model Deployment</strong>: Efficient updates across new delivery zones.</li> <li><strong>Continuous Monitoring</strong>: Regular tracking of model drift and retraining needs.</li> <li><strong>Cross-functional Collaboration</strong>: Uniting <strong>data scientists, engineers, and business teams</strong> for ongoing improvement.</li> </ol> <p>Despite <strong>real-world ML deployment challenges</strong>, our approach <strong>showcases MLOps’ power in optimizing operations</strong>.</p> <hr/> <h2 id="conclusion-1"><strong>Conclusion</strong></h2> <p>Our shift from <strong>rule-based to machine learning-based service time estimation</strong> has <strong>improved prediction accuracy</strong> and <strong>opened doors for future optimization</strong>.</p> <p>Key <strong>MLOps lessons learned</strong>:</p> <p>✔️ <strong>Data quality is the foundation of ML success.</strong></p> <p>✔️ <strong>Real-world ML deployment requires constant monitoring.</strong></p> <p>✔️ <strong>MLOps bridges the gap between research and production.</strong></p> <p>This case study shows how <strong>MLOps best practices drive logistics efficiency</strong>. 🚀</p> <hr/>]]></content><author><name></name></author><category term="ml"/><category term="mlops"/><summary type="html"><![CDATA[Introduction to MLOps and discussion on why it is important.]]></summary></entry><entry><title type="html">MLOps: Overview</title><link href="https://raghuhemadri.github.io/blog/2025/mlops-overview/" rel="alternate" type="text/html" title="MLOps: Overview"/><published>2025-01-22T09:00:00+00:00</published><updated>2025-01-22T09:00:00+00:00</updated><id>https://raghuhemadri.github.io/blog/2025/mlops-overview</id><content type="html" xml:base="https://raghuhemadri.github.io/blog/2025/mlops-overview/"><![CDATA[<p>Welcome to my MLOps blog series! I’m <strong>Raghu Hemadri</strong>, a machine learning researcher focusing on <strong>Large Language Models (LLMs)</strong> and <strong>Reinforcement Learning (RL)</strong>. This series draws from my experience in an MLOps course led by <strong>Professor <a href="https://witestlab.poly.edu/~ffund/">Fraida Fund</a></strong>, an expert in scaling ML models for production.</p> <p>Throughout these posts, I’ll walk you through essential MLOps concepts—from automation and model deployment to monitoring and workflow management. My goal is to share practical insights that will help you build and maintain production-ready ML systems. Stay tuned!</p> <h3 id="course-webpage">Course webpage:</h3> <p><a href="https://ffund.github.io/ml-sys-ops/">https://ffund.github.io/ml-sys-ops/</a></p> <h4 id="disclaimer">Disclaimer:</h4> <p>This blog series is based on concepts covered in <em>ECE-GY 9183: Machine Learning Systems Engineering and Operations</em>, taught by Prof. Fraida Fund. While it serves as an additional reference, it is <strong>not a substitute</strong> for the official course materials, lectures, or discussions. Students taking this course are <strong>strongly encouraged</strong> to follow the class and its content diligently. This blog should be used only as a supplementary resource to reinforce understanding, not as a primary learning source.</p>]]></content><author><name></name></author><category term="ml"/><category term="mlops"/><summary type="html"><![CDATA[Overview of the blog series]]></summary></entry></feed>